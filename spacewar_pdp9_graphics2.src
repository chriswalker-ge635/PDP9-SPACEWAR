.COND OFF,.COND,.INDEX,.TITLE,.STITL,.EJECT
.INDEX ON
.TITLE PDP-9/GRAPHIC II VERSION OF SPACEWAR
.STITL ASSEMBLY CONTROL
.PCC ON

.PMC ON

.DET ON

.REF LNRSM,ON

.REFMA ON

.LIST ON

.CRSM ON


THREE: .EQU 3


NUMSHP: .EQU 3 THREE SHIPS

NUMBLT: .EQU 21. TWENTY ONE BULLETS

NUMOBJ: .EQU NUMSHP+NUMBLT NUMBER OF OBJECTS IS SUM OF ABOVE
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- HARDWARE
.LOC 0
*
*
*PI SUBROUTINE
*
PI: XX
JMP INT JUMP TO INTERUPT HANDLING ROUTINE
*
*
*RESERVED WORDS
*
.BLOCK 6-2+1 RESERVED FOR PDP-9 SYSTEM PROGRAMS
*
*
*CLOCK
*
CLOCK: .BLOCK 1 STORES REAL-TIME CLOCK COUNT
*
*
*AUTOINDEX REGISTERS
*
X0: .BLOCK 1 AUTOINDEX REGISTER 0
X1: .BLOCK 1 AUTOINDEX REGISTER 1
X2: .BLOCK 1 AUTOINDEX REGISTER 2
X3: .BLOCK 1 AUTOINDEX REGISTER 3
X4: .BLOCK 1 AUTOINDEX REGISTER 4
X5: .BLOCK 1 AUTOINDEX REGISTER 5
X6: .BLOCK 1 AUTOINDEX REGISTER 6
X7: .BLOCK 1 AUTOINDEX REGISTER 7
*
*
*CAL SUBROUTINE
*
XX
HLT "HALT PROGRAM IMMEDIATELY UPON EXECUTION OF A CAL
*
*
*RESERVED WORDS
*
.BLOCK 27-22+1 RESERVED FOR PDP-9 SYSTEM PROGRAMS
*
*
*FOUR PAIRS OF WORD COUNTER/CURRENT ADDRESS REGISTERS FOR USE WITH DATA CHANNELS 0-3
*
.BLOCK 4*2
*
*
*API ROUTINES
*
.BLOCK 32.
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- RESTART ADDRESSES
*
*
*RESTART AT LOCATION 100 FOR NORMAL (?) SPACEWAR
*
JMP AGAIN
*
*
*RESTART AT LOCATION 101 FOR RANDOM PLACEMENT OF THE SUN
*
JMP RNDSUN
*
*
*RESTART AT LOCATION 102 TO PUT THE SUN BACK IN THE CENTER OF THE SCREEN
*
JMP CENTER
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- DISABLE  TABLE
.LOC 120 ESTABLISH CANONICAL LOCATION FOR PATCHING FACILITY

.HEAD X

DTAB: ...

*
*
*DESTROY SHIP TOTALLY
*
777777 "DESTROY SHIP TOTALLY
777777 "DESTROY SHIP TOTALLY
*
*
*DISABLE BULLET-FIRING
*
020000 "DISABLE BULLET-FIRING
020000 "DISABLE BULLET-FIRING
020000 "DISABLE BULLET-FIRING
*
*
*
*DISABLE THRUST
*
040000 "DISABLE THRUST
040000 "DISABLE THRUST
040000 "DISABLE THRUST
*
*
*DISABLE LEFT TURN
*
200000 "DISABLE LEFT TURN
200000 "DISABLE LEFT TURN
200000 "DISABLE LEFT TURN
201000 "DISABLE LEFT TURN; TURN ON ANGULAR MOMENTUM
*
*
*DISABLE RIGHT TURN
*
100000 "DISABLE RIGHT TURN
100000 "DISABLE RIGHT TURN
100000 "DISABLE RIGHT TURN
101000 "DISABLE RIGHT TURN; TURN ON ANGULAR MOMENTUM
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- HANDICAP TABLE
.LOC 140 ESTABLISH CANONICAL LOCATION FOR PATCHING FACILITY

.HEAD X

GRAVT: 4 "GRAVITY CONSTANT

THRUS: LRSS 11. THRUST FACTOR

ROLL: 48. "AMOUNT OF ROLL FORCE

FUEL: -1536.-1 "FUEL SUPPLY FOR SHIPS

BLNUM: -32.-1 "NUMBER OF BULLETS PER SHIP PER GAME

BLVEL: LRSS 2 BULLET VELOCITY FACTOR

BLTIM: -128.-1 "AMOUNT OF TIME THAT A BULLET LASTS

BLINT: -12.-1 "INTERVAL THAT BULLETS CAN BE SHOT

SUNSZ: -2560.-1 "SIZE OF THE SUN

SHPSZ: -2048.-1 "SIZE OF THE SHIPS AND BULLETS

WTIME: -64.-1 "AMOUNT OF TIME THAT A WARP LASTS

STIME: -96.-1 "AMOUNT OF TIME THAT A WARP STAR LASTS

DTIME: -128.-1 "AMOUNT OF TIME UNTIL NEXT POSSIBLE WARP

WAREA: LRSS 0 HOW FAR FROM WHERE YOU WARP DO YOU COME BACK?

WVELO: LRSS 5 HOW FAST ARE YOU GOING WHEN YOU COME BACK?

WFACT: 040000 "WARP FACTOR

FRICT: 400000 "FRICTION FACTOR

TTIME: -262143.-1 "THRUST RESTORATION AFTER PARTIAL DAMAGE TIMER

BTIME: -1024.-1 "BULLET RESTORATION AFTER PARTIAL DAMAGE TIMER

LTIME: -262143.-1 "LEFT TURN RESTORATION AFTER PARTIAL DAMAGE TIMER

RTIME: -262143.-1 "RIGHT TURN RESTORATION AFTER PARTIAL DAMAGE TIMER
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- DISABLE  TABLE -- 1
.LOC 220 ESTABLISH CANONICAL LOCATION FOR PATCHING FACILITY

.HEAD 1

DTAB: ...
*
*
*DESTROY SHIP TOTALLY
*
777777 "DESTROY SHIP TOTALLY
777777 "DESTROY SHIP TOTALLY
*
*
*DISABLE BULLET-FIRING
*
020000 "DISABLE BULLET-FIRING
020000 "DISABLE BULLET-FIRING
020000 "DISABLE BULLET-FIRING
*
*
*
*DISABLE THRUST
*
040000 "DISABLE THRUST
040000 "DISABLE THRUST
040000 "DISABLE THRUST
*
*
*DISABLE LEFT TURN
*
200000 "DISABLE LEFT TURN
200000 "DISABLE LEFT TURN
200000 "DISABLE LEFT TURN
201000 "DISABLE LEFT TURN; TURN ON ANGULAR MOMENTUM
*
*
*DISABLE RIGHT TURN
*
100000 "DISABLE RIGHT TURN
100000 "DISABLE RIGHT TURN
100000 "DISABLE RIGHT TURN
101000 "DISABLE RIGHT TURN; TURN ON ANGULAR MOMENTUM
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- HANDICAP TABLE -- 1
.LOC 240 ESTABLISH CANONICAL LOCATION FOR PATCHING FACILITY

.HEAD 1

GRAVT: 4 "GRAVITY CONSTANT

THRUS: LRSS 11. THRUST FACTOR

ROLL: 48. "AMOUNT OF ROLL FORCE

FUEL: -1536.-1 "FUEL SUPPLY FOR SHIPS

BLNUM: -32.-1 "NUMBER OF BULLETS PER SHIP PER GAME

BLVEL: LRSS 2 BULLET VELOCITY FACTOR

BLTIM: -128.-1 "AMOUNT OF TIME THAT A BULLET LASTS

BLINT: -12.-1 "INTERVAL THAT BULLETS CAN BE SHOT

SUNSZ: -2560.-1 "SIZE OF THE SUN

SHPSZ: -2048.-1 "SIZE OF THE SHIPS AND BULLETS

WTIME: -64.-1 "AMOUNT OF TIME THAT A WARP LASTS

STIME: -96.-1 "AMOUNT OF TIME THAT A WARP STAR LASTS

DTIME: -128.-1 "AMOUNT OF TIME UNTIL NEXT POSSIBLE WARP

WAREA: LRSS 0 HOW FAR FROM WHERE YOU WARP DO YOU COME BACK?

WVELO: LRSS 5 HOW FAST ARE YOU GOING WHEN YOU COME BACK?

WFACT: 040000 "WARP FACTOR

FRICT: 400000 "FRICTION FACTOR

TTIME: -262143.-1 "THRUST RESTORATION AFTER PARTIAL DAMAGE TIMER

BTIME: -1024.-1 "BULLET RESTORATION AFTER PARTIAL DAMAGE TIMER

LTIME: -262143.-1 "LEFT TURN RESTORATION AFTER PARTIAL DAMAGE TIMER

RTIME: -262143.-1 "RIGHT TURN RESTORATION AFTER PARTIAL DAMAGE TIMER
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- DISABLE  TABLE -- 2
.LOC 320 ESTABLISH CANONICAL LOCATION FOR PATCHING FACILITY

.HEAD 2

DTAB: ...
*
*
*DESTROY SHIP TOTALLY
*
777777 "DESTROY SHIP TOTALLY
777777 "DESTROY SHIP TOTALLY
*
*
*DISABLE BULLET-FIRING
*
020000 "DISABLE BULLET-FIRING
020000 "DISABLE BULLET-FIRING
020000 "DISABLE BULLET-FIRING
*
*
*
*DISABLE THRUST
*
040000 "DISABLE THRUST
040000 "DISABLE THRUST
040000 "DISABLE THRUST
*
*
*DISABLE LEFT TURN
*
200000 "DISABLE LEFT TURN
200000 "DISABLE LEFT TURN
200000 "DISABLE LEFT TURN
201000 "DISABLE LEFT TURN; TURN ON ANGULAR MOMENTUM
*
*
*DISABLE RIGHT TURN
*
100000 "DISABLE RIGHT TURN
100000 "DISABLE RIGHT TURN
100000 "DISABLE RIGHT TURN
101000 "DISABLE RIGHT TURN; TURN ON ANGULAR MOMENTUM
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- HANDICAP TABLE -- 2
.LOC 340 ESTABLISH CANONICAL LOCATION FOR PATCHING FACILITY

.HEAD 2

GRAVT: 4 "GRAVITY CONSTANT

THRUS: LRSS 11. THRUST FACTOR

ROLL: 48. "AMOUNT OF ROLL FORCE

FUEL: -1536.-1 "FUEL SUPPLY FOR SHIPS

BLNUM: -32.-1 "NUMBER OF BULLETS PER SHIP PER GAME

BLVEL: LRSS 2 BULLET VELOCITY FACTOR

BLTIM: -128.-1 "AMOUNT OF TIME THAT A BULLET LASTS

BLINT: -12.-1 "INTERVAL THAT BULLETS CAN BE SHOT

SUNSZ: -2560.-1 "SIZE OF THE SUN

SHPSZ: -2048.-1 "SIZE OF THE SHIPS AND BULLETS

WTIME: -64.-1 "AMOUNT OF TIME THAT A WARP LASTS

STIME: -96.-1 "AMOUNT OF TIME THAT A WARP STAR LASTS

DTIME: -128.-1 "AMOUNT OF TIME UNTIL NEXT POSSIBLE WARP

WAREA: LRSS 0 HOW FAR FROM WHERE YOU WARP DO YOU COME BACK?

WVELO: LRSS 5 HOW FAST ARE YOU GOING WHEN YOU COME BACK?

WFACT: 040000 "WARP FACTOR

FRICT: 400000 "FRICTION FACTOR

TTIME: -262143.-1 "THRUST RESTORATION AFTER PARTIAL DAMAGE TIMER

BTIME: -1024.-1 "BULLET RESTORATION AFTER PARTIAL DAMAGE TIMER

LTIME: -262143.-1 "LEFT TURN RESTORATION AFTER PARTIAL DAMAGE TIMER

RTIME: -262143.-1 "RIGHT TURN RESTORATION AFTER PARTIAL DAMAGE TIMER
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- DISABLE  TABLE -- 3
.LOC 420 ESTABLISH CANONICAL LOCATION FOR PATCHING FACILITY

.HEAD 3

DTAB: ...
*
*
*DESTROY SHIP TOTALLY
*
777777 "DESTROY SHIP TOTALLY
777777 "DESTROY SHIP TOTALLY
*
*
*DISABLE BULLET-FIRING
*
020000 "DISABLE BULLET-FIRING
020000 "DISABLE BULLET-FIRING
020000 "DISABLE BULLET-FIRING
*
*
*
*DISABLE THRUST
*
040000 "DISABLE THRUST
040000 "DISABLE THRUST
040000 "DISABLE THRUST
*
*
*DISABLE LEFT TURN
*
200000 "DISABLE LEFT TURN
200000 "DISABLE LEFT TURN
200000 "DISABLE LEFT TURN
201000 "DISABLE LEFT TURN; TURN ON ANGULAR MOMENTUM
*
*
*DISABLE RIGHT TURN
*
100000 "DISABLE RIGHT TURN
100000 "DISABLE RIGHT TURN
100000 "DISABLE RIGHT TURN
101000 "DISABLE RIGHT TURN; TURN ON ANGULAR MOMENTUM
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- HANDICAP TABLE -- 3
.LOC 440 ESTABLISH CANONICAL LOCATION FOR PATCHING FACILITY

.HEAD 3

GRAVT: 4 "GRAVITY CONSTANT

THRUS: LRSS 11. THRUST FACTOR

ROLL: 48. "AMOUNT OF ROLL FORCE

FUEL: -1536.-1 "FUEL SUPPLY FOR SHIPS

BLNUM: -32.-1 "NUMBER OF BULLETS PER SHIP PER GAME

BLVEL: LRSS 2 BULLET VELOCITY FACTOR

BLTIM: -128.-1 "AMOUNT OF TIME THAT A BULLET LASTS

BLINT: -12.-1 "INTERVAL THAT BULLETS CAN BE SHOT

SUNSZ: -2560.-1 "SIZE OF THE SUN

SHPSZ: -2048.-1 "SIZE OF THE SHIPS AND BULLETS

WTIME: -64.-1 "AMOUNT OF TIME THAT A WARP LASTS

STIME: -96.-1 "AMOUNT OF TIME THAT A WARP STAR LASTS

DTIME: -128.-1 "AMOUNT OF TIME UNTIL NEXT POSSIBLE WARP

WAREA: LRSS 0 HOW FAR FROM WHERE YOU WARP DO YOU COME BACK?

WVELO: LRSS 5 HOW FAST ARE YOU GOING WHEN YOU COME BACK?

WFACT: 040000 "WARP FACTOR

FRICT: 400000 "FRICTION FACTOR

TTIME: -262143.-1 "THRUST RESTORATION AFTER PARTIAL DAMAGE TIMER

BTIME: -1024.-1 "BULLET RESTORATION AFTER PARTIAL DAMAGE TIMER

LTIME: -262143.-1 "LEFT TURN RESTORATION AFTER PARTIAL DAMAGE TIMER

RTIME: -262143.-1 "RIGHT TURN RESTORATION AFTER PARTIAL DAMAGE TIMER
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- DISABLE  TABLE
.LOC 520 ESTABLISH CANONICAL LOCATION FOR PATCHING FACILITY

.HEAD

DTAB: ...
*
*
*DESTROY SHIP TOTALLY
*
777777 "DESTROY SHIP TOTALLY
777777 "DESTROY SHIP TOTALLY
*
*
*DISABLE BULLET-FIRING
*
020000 "DISABLE BULLET-FIRING
020000 "DISABLE BULLET-FIRING
020000 "DISABLE BULLET-FIRING
*
*
*
*DISABLE THRUST
*
040000 "DISABLE THRUST
040000 "DISABLE THRUST
040000 "DISABLE THRUST
*
*
*DISABLE LEFT TURN
*
200000 "DISABLE LEFT TURN
200000 "DISABLE LEFT TURN
200000 "DISABLE LEFT TURN
201000 "DISABLE LEFT TURN; TURN ON ANGULAR MOMENTUM
*
*
*DISABLE RIGHT TURN
*
100000 "DISABLE RIGHT TURN
100000 "DISABLE RIGHT TURN
100000 "DISABLE RIGHT TURN
101000 "DISABLE RIGHT TURN; TURN ON ANGULAR MOMENTUM
.STITL LOW CORE DEFINITIONS -- RESERVED ADDRESSES -- SOFTWARE -- HANDICAP TABLE
.LOC 540 ESTABLISH CANONICAL LOCATION FOR PATCHING FACILITY

.HEAD

GRAVT: 4 "GRAVITY CONSTANT

THRUS: LRSS 11. THRUST FACTOR

ROLL: 48. "AMOUNT OF ROLL FORCE

FUEL: -1536.-1 "FUEL SUPPLY FOR SHIPS

BLNUM: -32.-1 "NUMBER OF BULLETS PER SHIP PER GAME

BLVEL: LRSS 2 BULLET VELOCITY FACTOR

BLTIM: -128.-1 "AMOUNT OF TIME THAT A BULLET LASTS

BLINT: -12.-1 "INTERVAL THAT BULLETS CAN BE SHOT

SUNSZ: -2560.-1 "SIZE OF THE SUN

SHPSZ: -2048.-1 "SIZE OF THE SHIPS AND BULLETS

WTIME: -64.-1 "AMOUNT OF TIME THAT A WARP LASTS

STIME: -96.-1 "AMOUNT OF TIME THAT A WARP STAR LASTS

DTIME: -128.-1 "AMOUNT OF TIME UNTIL NEXT POSSIBLE WARP

WAREA: LRSS 0 HOW FAR FROM WHERE YOU WARP DO YOU COME BACK?

WVELO: LRSS 5 HOW FAST ARE YOU GOING WHEN YOU COME BACK?

WFACT: 040000 "WARP FACTOR

FRICT: 400000 "FRICTION FACTOR

TTIME: -262143.-1 "THRUST RESTORATION AFTER PARTIAL DAMAGE TIMER

BTIME: -1024.-1 "BULLET RESTORATION AFTER PARTIAL DAMAGE TIMER

LTIME: -262143.-1 "LEFT TURN RESTORATION AFTER PARTIAL DAMAGE TIMER

RTIME: -262143.-1 "RIGHT TURN RESTORATION AFTER PARTIAL DAMAGE TIMER
.STITL INITIALIZATION ROUTINES -- START OF NEW PROGRAM
.LOC 600
*
*
*CLEAR ALL FLAGS
*
START: CAF "CLEAR ALL FLAGS
CDF "CLEAR DISPLAY FLAGS
*
*
*SET UP POINTERS TO THE SCOPE BUFFERS
*
LAC (3000) SIZE OF A SCOPE BUFFER FOR SHIPS AND BULLETS
DAC OFFSET KEEP IT AROUND 

LAC PSCBUF ADDRESS OF SCOPE BUFFER

ADD (777) ADD THE LENGTH OF THE STAR SCOPE BUFFER
DAC STREND TO GET THE ADDRESS OF THE STAR SCOPE BUFFER TRAP WORD

ADD (1) ADD ONE
DAC PBUFF1 TO GET THE ADDRESS OF THE FIRST SCOPE BUFFER

ADD OFFSET ADD THE SIZE OF A SCOPE BUFFER
DAC PBUFF2 TO GET THE ADDRESS OF THE SECOND SCOPE BUFFER
*
*
*FILL UP ALL THE SCOPE BUFFERS WITH CONTROL WORDS
*
ADD OFFSET ***
CMA "* CALCULATE THE COMBINED LENGTH OF ALL THE SCOPE BUFFERS
ADD PSCBUF ***
DAC TEMP0

LAW -1 ***
ADD PSCBUF * SET UP A POINTER TO THE BEGINNING OF THE SCOPE BUFFERS
DAC X5 ***

LAC (300000) LOAD A CONTROL WORD

DAC X5,I ***
ISZ TEMP0 * FILL UP ALL THE SCOPE BUFFERS WITH CONTROL WORDS
JMP .-2 ***
.EJECT
*
*
*INITIALIZE SCOPE BUFFER PARAMETER AND TRAP WORDS
*
LAC (065040) GET A PARAMETER WORD
DAC PSCBUF,I PUT IT AT THE BEGINNING OF THE STAR SCOPE BUFFER

LAC (400000) ***
ADD PSCBUF * LINK THE STAR SCOPE BUFFER ONTO THE END OF THE FIRST SCOPE BUFFER
DAC PBUFF2,I ***

LAC (400000) ***
ADD PBUFF2 * LINK THE SECOND SCOPE BUFFER ONTO THE END OF THE STAR SCOPE BUFFER
DAC STREND,I ***
*
*
*CREATE A REAL-TIME ENVIRONMENT
*
LAC PSCBUF

CLON "TURN ON THE CLOCK

ION "TURN ON THE PROGRAM INTERRUPT SYSTEM

BEG "TURN ON THE SCOPE DISPLAY
.EJECT
*
*
*SET UP THE STARS
*
LAW -16.-1 INITIALIZE THE STAR TIMER
DAC STIMER

LAC PSCBUF GET A POINTER TO THE STAR SCOPE BUFFER
DAC X1

LAC (STABLE-1) GET A POINTER TO THE STAR TABLE
DAC X2

START1: LAC X2,I PICK UP THE X-COORDINATE
SPA "SEE IF THIS IS A STARTING STAR
JMP START2 IF NOT, WE'RE DONE WITH THE SETTING UP

DAC TEMP0 IF SO, SAVE THE X-COORDINATE

LAC X2,I PICK UP THE Y-COORDINATE AND INTENSITY
LMQ!EAECLA!LLSS 3 RIGHT JUSTIFY INTENSITY IN AC
XOR (040000) OR IN SCOPE COMMAND
DAC X1,I PUT IN STAR SCOPE BUFFER

LAC TEMP0 GET BACK X-COORDINATE
XOR (140000) OR IN SCOPE COMMAND
DAC X1,I PUT IN STAR SCOPE BUFFER

EAECLA!LLSS 18.-3 GET BACK Y-COORDINATE
XOR (174000) OR IN SCOPE COMMAND
DAC X1,I PUT IN STAR SCOPE BUFFER

JMP START1

START2: LAC X2 SAVE FINAL POINTER TO STAR TABLE
DAC PSTABL

LAC X1 ***
DAC PSBUF2 * SAVE FINAL POINTER TO STAR SCOPE BUFFER
ISZ PSBUF2 ***

LAC PSCBUF ***
DAC PSBUF1 * INITIALIZE POINTER TO BEGINNING OF STAR SCOPE BUFFER
ISZ PSBUF1 ***

DZM SRANGE INITIALIZE X-COORDINATE RANGE
.STITL INITIALIZATION ROUTINES -- START OF NEW GAME
AGAIN: LAW SXTRAN-1 SET UP A POINTER TO THE OBJECT DEFINITION TABLE
DAC X5

LAW -ODTLEN GET THE SIZE OF THE OBJECT DEFINITION TABLE
DAC TEMP0

DZM X5,I ***
ISZ TEMP0 * ZERO OUT THE OBJECT DEFINITION TABLE
JMP .-2 ***
*
*
*DEFINE TRANSFER VECTOR ENTRIES FOR EACH SHIP
*
LAC (S1SHIP+300000) SET UP MANAGEMENT ROUTINE ADDRESS FOR SHIP 1
DAC S1TRAN

LAC (S2SHIP+300000) SET UP MANAGEMENT ROUTINE ADDRESS FOR SHIP 2
DAC S2TRAN

LAS "GET THE SWITCHES
DAC SWITCH SAVE THE SWITCHES

AND (002000) CHECK FOR THIRD SHIP
SZA!CLL
LAC (S3SHIP+300000) SET UP MANAGEMENT ROUTINE ADDRESS FOR SHIP 3
DAC S3TRAN
*
*
*SAVE NUMBER OF SHIPS PARTICPATING IN THIS GAME
*
RTL
GLK
CMA
DAC NSHIP INITIALIZE COUNTER OF SURVIVING SHIPS
*
*
*FLAG THAT EACH SHIP IS INITIALLY UNDAMAGED
*
DAC S1DAMS NO DAMAGE TO SHIP 1 INITIALLY
DAC S2DAMS NO DAMAGE TO SHIP 2 INITIALLY
DAC S3DAMS NO DAMAGE TO SHIP 3 INITIALLY
*
*
*CALCULATE AMOUNT OF TIME THAT GAME LASTS AFTER LAST SHOTS HAVE BEEN FIRED
*
LAC X$BLTIM AMOUNT OF TIME THAT A BULLET LASTS
ALSS 1 TIMES TWO
DAC GAMTIM YIELDS PAUSE TIME BETWEEN GAMES
.EJECT
*
*
*SET UP RANDOM POSITIONS OF EACH SHIP
*
JMS RNDPOS GET RANDOM POSITIONS
DAC S1XLOC SET UP RANDOM X LOCATION OF SHIP 1
LACQ "SET UP RANDOM   POSITION OF SHIP 1
DAC S1YLOC SET UP RANDOM Y LOCATION OF SHIP 1

JMS RNDPOS GET RANDOM POSITIONS
DAC S2XLOC SET UP RANDOM X LOCATION OF SHIP 2
LACQ "SET UP RANDOM   POSITION OF SHIP 2
DAC S2YLOC SET UP RANDOM Y LOCATION OF SHIP 2

JMS RNDPOS GET RANDOM POSITIONS
DAC S3XLOC SET UP RANDOM X LOCATION OF SHIP 3
LACQ "SET UP RANDOM   POSITION OF SHIP 3
DAC S3YLOC SET UP RANDOM Y LOCATION OF SHIP 3
*
*
*SET UP RANDOM ORIENTATIONS OF EACH SHIP
*
JMS RANDOM GET A PSEUDO-RANDOM NUMBER
DAC S1ANGL

RTL "ROTATE A LITTLE
DAC S2ANGL

RTL "ROTATE A LITTLE MORE
DAC S3ANGL
.EJECT
*
*
*SUPPLY EACH SHIP WITH FUEL AND BULLETS
*
LAC X$FUEL GET INITIAL FUEL SUPPLY FOR EACH SHIP
DAC S1FUEL SUPPLY SHIP 1 WITH FUEL
DAC S2FUEL SUPPLY SHIP 2 WITH FUEL
DAC S3FUEL SUPPLY SHIP 3 WITH FUEL

LAC X$BLNUM GET INITIAL BULLET SUPPLY FOR EACH SHIP
DAC S1BULL SUPPLY SHIP 1 WITH BULLETS
DAC S2BULL SUPPLY SHIP 2 WITH BULLETS
DAC S3BULL SUPPLY SHIP 3 WITH BULLETS

LAC SWITCH GET BACK THE SWITCHES
AND (000200) SEE IF SWITCH 10 SET
SNA "YES, SHIPS HAVE INDIVIDUAL SUPPLIES DEFINED FOR THEM
JMP AGAIN1 "NO, FUEL SUPPLIES ARE THE SAME FOR ALL THREE SHIPS

LAC 1$FUEL SUPPLY SHIP 1 WITH FUEL
DAC S1FUEL

LAC 2$FUEL SUPPLY SHIP 2 WITH FUEL
DAC S2FUEL

LAC 3$FUEL SUPPLY SHIP 3 WITH FUEL
DAC S3FUEL

LAC 1$BLNUM SUPPLY SHIP 1 WITH BULLETS
DAC S1BULL

LAC 2$BLNUM SUPPLY SHIP 2 WITH BULLETS
DAC S2BULL

LAC 3$BLNUM SUPPLY SHIP 3 WITH BULLETS
DAC S3BULL

AGAIN1: LAC SWITCH GET BACK THE SWITCHES
ALS 7. CHECK FOR THIRD SHIP
SMA!RAL "SHIP IS PRESENT, MAINTAIN ITS BULLET SUPPLY
DZM S3BULL SHIP IS NOT PRESENT, WIPE OUT ITS BULLET SUPPLY
.EJECT
*
*
*ALLOW PLAYERS TO CHOOSE DIFFERENT SHIPS
*
LAC SWITCH GET BACK THE SWITCHES
AND (000100) CHECK BIT 11
SNA "SKIP IF PLAYERS WANT CHOICE IN MATTER
JMP SETUP1 "NO, THEY'RE NOT FUSSY

LAW SETUP1 ***
LMQ "* POINT TO INSTRUCTIONS USED TO SET UP POINTERS TO PICTURES OF SHIP 1
LAW SETUD1 ***
JMS SELECT

LAW SETUP2 ***
LMQ "* POINT TO INSTRUCTIONS USED TO SET UP POINTERS TO PICTURES OF SHIP 2
LAW SETUD2 ***
JMS SELECT

SNL "CHECK FOR THIRD SHIP
JMP SETUP1

LAW SETUP3 ***
LMQ "* POINT TO INSTRUCTIONS USED TO SET UP POINTERS TO PICTURES OF SHIP 3
LAW SETUD3 ***
JMS SELECT
*
*
*SET UP POINTERS TO PICTURES OF SHIPS
*
SETUP1: LAW S1PIC-1 LONG, SLIM SHIP
DAC S1PICP

SETUP2: LAW S2PIC-1 SHORT, FAT SHIP
DAC S2PICP

SETUP3: LAW S3PIC-1 U.S.S. ENTERPRISE
DAC S3PICP
*
*
*SET UP POINTERS TO PICTURES OF DAMAGED SHIPS
*
SETUD1: LAW S1PICD-1 LONG, SLIM SHIP
DAC S1PICN

SETUD2: LAW S2PICD-1 SHORT, FAT SHIP
DAC S2PICN

SETUD3: LAW S3PICD-1 U.S.S. ENTERPRISE
DAC S3PICN

JMP BUMP
.EJECT


SELECT: XX

DAC DAMSET ***
LACQ "* SAVE PROGRAM INSERTION ADDRESSES
DAC PICSET ***

LAW SBANK-2-1 SET UP A POINTER TO BEGINNING OF SHIP TABLE
DAC X7

SEL1: LPB
WBL "ACKNOWLEDGE DEPRESSED PUSHBUTTONS

SNA "SKIP IF PUSHBUTTON DEPRESSED
JMP SEL1 JUMP IF NOT

LMQ "SET UP PUSHBUTTON READING FOR SHIFT INTO ACCUMULATOR

LAC (500000) INITIALIZE DELAY COUNT
DAC TEMP0

LPB "***
ISZ TEMP0 * PAUSE FOR A FRACTION OF A SECOND
JMP .-2 ***

SEL2: LLS 1 LOOK FOR PUSHED BUTTON

ISZ X7 BUMP TABLE POINTER
ISZ X7 BY ONE DOUBLE-WORD ENTRY

SNA "SKIP IF THIS WAS THE PUSHED BUTTON
JMP SEL2

LAC X7,I GET INSTRUCTION TO SET UP POINTER TO PICTURE
DAC PICSET,I INSERT IT IN THE PROGRAM

LAC X7,I GET INSTRUCTION TO SET UP POINTER TO DAMAGED PICTURE
DAC DAMSET,I INSERT IT IN THE PROGRAM

JMP SELECT,I AND EXIT


PICSET: 0
DAMSET: 0
.STITL OBJECT MANAGEMENT ROUTINES -- COLLISION CHECKING -- INITIALIZATION
*
*
*SET CLOCK
*
BUMP: LAW -2 SET CLOCK TO INTERRUPT AFTER TWO TIMER UNITS HAVE EXPIRED
DAC CLOCK
*
*
*SET UP IDLE LOOP
*
LAC (JMP THREE) SET UP IDLE LOOP TO IDLE
DAC THREE
*
*
*GET AND SAVE THE PUSHBUTTONS AND THE SWITCHES
*
LPB "GET THE PUSHBUTTONS
WBL "ACKNOWLEDGE DEPRESSED PUSHBUTTONS
DAC BUTTON SAVE THE PUSHBUTTONS

LAS "GET THE SWITCHES
DAC SWITCH SAVE THE SWITCHES
*
*
*SET UP A COPY OF THE APPROPRIATE HANDICAP TABLE
*
AND (000200) SEE IF SWITCH 10 SET
SZA "***
LAC (100) * GET A POINTER TO THE APPROPRIATE COMMAND TABLE
ADD (1$DTAB-100-1) ***

DAC HANDI INITIALIZE HANDICAP TABLE POINTER
DAC X6

LAW DTAB-1 GET A POINTER TO THE TABLE USED BY THE PROGRAM
DAC X7

LAW -RTIME+DTAB-1 GET THE COMPLEMENT OF THE SIZE FOR USE AS A COUNTER
DAC TEMP0 USE A TEMPORARY TO HOLD THE COUNTER

LAC X6,I ***
DAC X7,I * COPY OVER THE APPROPRIATE TABLE
ISZ TEMP0 ***
JMP .-3
.EJECT
*
*
*SWITCH SCOPE BUFFERS
*
LAC OFFSET ***
CMA "* GET A POINTER TO THE NEW SCOPE BUFFER
ADD STREND,I ***

ADD (-1-1) ***
AND (8.*1024.-1) * ADJUST, TRIM, AND SAVE IT
DAC X0 ***
*
*
*INITIALLY INSTRUCT PROGRAM TO INCREMENT VARIOUS SHIP DEFINITION POINTERS
*
LAC (SKP) CHECK SHIPS FIRST
DAC DONE
*
*
*INITIALIZE COUNTER OF SHIPS CHECKED AGAINST COLLISION
*
LAW -NUMSHP INITIALIZE COUNTER OF SHIPS CHECKED AGAINST COLLISION
DAC SHPCNT
*
*
*INITIALIZE COUNTER OF OBJECTS CHECKED AGAINST COLLISION
*
LAW -NUMOBJ INITIALIZE COUNTER OF OBJECTS CHECKED AGAINST COLLISION
DAC OBJCNT
.EJECT
*
*
*INITIALIZE POINTERS TO THE OBJECT DEFINITION TABLE
*
LAW SXTRAN
DAC SQTRAN 

LAW SXXLOC
DAC SQXLOC

LAW SXYLOC
DAC SQYLOC

LAW SXXVEL
DAC SQXVEL

LAW SXYVEL
DAC SQYVEL

LAW SXTIME
DAC SQTIME

LAW SXDIST
DAC SQDIST
.EJECT
LAW SXANGL
DAC SQANGL

LAW SXROLL
DAC SQROLL

LAW SXFUEL
DAC SQFUEL

LAW SXBULL
DAC SQBULL

LAW SXPICP
DAC SQPICP

LAW SXPICN
DAC SQPICN

LAW SXWTIM
DAC SQWTIM

LAW SXWFAC
DAC SQWFAC

LAW SXINVF
DAC SQINVF

LAW SXINVT
DAC SQINVT

LAW SXDAMS
DAC SQDAMS

LAW SXTTIM
DAC SQTTIM

LAW SXBTIM
DAC SQBTIM

LAW SXLTIM
DAC SQLTIM

LAW SXRTIM
DAC SQRTIM
.EJECT
*
*
*TERMINATE GAME IF LESS THAN TWO SHIPS SURVIVE
*
LAC NSHIP ***
SMA "* TERMINATE GAME IF LESS THAN TWO SHIPS SURVIVE
JMP ENDGAM ***
*
*
*TERMINATE GAME IF ALL THE SHIPS ARE OUT OF BULLETS
*
LAC S1BULL GET BULLET SUPPLY OF SHIP 1
ADD S2BULL ADD BULLET SUPPLY OF SHIP 2
ADD S3BULL ADD BULLET SUPPLY OF SHIP 3
SNA

ENDGAM: ISZ GAMTIM IS THE GAME OVER YET?
JMP BUMP1 NO, SO RETURN

JMP AGAIN YES, SO RESTART
.STITL OBJECT MANAGEMENT ROUTINES -- COLLISION CHECKING
*
*
*CHECK FOR COLLISION OF EVERY OBJECT WITH EVERY OTHER OBJECT
*
BUMP1: LAC SQTRAN,I GET AN ENTRY OUT OF TRANSFER VECTOR

SNA
JMP NEXT GO AND BUMP ALL THE POINTERS IF NOTHING IS THERE

SPA
JMP GOTOIT IF THE ENTRY IS NEGATIVE, THE OBJECT IS EITHER EXPLODING OR WARPED

LAC SQTRAN GET A POINTER TO THE TRANSFER VECTOR
DAC X5

LAC SQXLOC GET A POINTER TO THE X LOCATION
DAC X6

LAC SQYLOC GET A POINTER TO THE Y LOCATION
DAC X7

AND (8.*1024.-1) EXTRACT ADDRESS BITS
ADD (-SXYLOC-NUMOBJ) SUBTRACT THE END OF THE TABLE
DAC TEMP0 TO GET THE NUMBER OF ENTRIES TO CHECK

BUMP2: ISZ TEMP0 INCREMENT COUNT OF OBJECTS CHECKED
SKP "SKIP IF MORE OBJECTS TO CHECK
JMP BUMP5 JUMP IF NO MORE OBJECTS TO CHECK

LAC X5,I GET THE NEXT ENTRY IN THE TRANSFER VECTOR
SPA!SNA "IF IT'S NEGATIVE, IT'S NOT REALLY THERE
JMP BUMP3 SO GO BUMP THE REST OF THE POINTER

LAC X6,I GET THE X LOCATION OF ANOTHER OBJECT
CMA "COMPLEMENT IT
ADD SQXLOC,I SUBTRACT IT FROM THE X LOCATION OF THE OBJECT UNDER SCRUTINY
GSM "GET THE MAGNITUDE OF THE DISTANCE BETWEEN THEM
ADD SHPSZ SUBTRACT THE SIZE OF THE OBJECT UNDER SCRUTINY
SMA "ARE THEY CLOSE ENOUGH TO COLLIDE?
JMP BUMP4 NO

LAC X7,I GET THE Y LOCATION OF ANOTHER OBJECT
CMA "COMPLEMENT IT
ADD SQYLOC,I SUBTRACT IT FROM THE X LOCATION OF THE OBJECT UNDER SCRUTINY
GSM "GET THE MAGNITUDE OF THE DISTANCE BETWEEN THEM
ADD SHPSZ SUBTRACT THE SIZE OF THE OBJECT UNDER SCRUTINY
SMA "ARE THEY CLOSE ENOUGH TO COLLIDE?
JMP BUMP2 NO

JMP ZONK YES, SO GO ZONK BOTH OBJECTS
.EJECT
BUMP3: ISZ X6 BUMP THE X LOCATION POINTER

BUMP4: ISZ X7 BUMP THE Y LOCATION POINTER

JMP BUMP2 AND GO CHECK THE NEXT OBJECT
*
*
*CHECK FOR COLLISION OF THE OBJECT CURRENTLY UNDER SCRUTINY WITH THE SUN
*
BUMP5: LAC SQXLOC,I GET THE X LOCATION
GSM "ITS MAGNITUDE
DAC TEMP0 SAVE IT

LAC SQYLOC,I GET THE Y LOCATION
GSM "ITS MAGNITUDE
ADD TEMP0 ADD THE X LOCATION
RCR "DIVIDE BY TWO
ADD SUNSZ SUBTRACT THE SIZE OF THE SUN
SPA "IS IT CLOSE ENOUGH TO COLLIDE?
JMP KILL YES
"NO, SO FALL INTO THIS PARTICULAR OBJECT'S MANAGEMENT ROUTINE
*
*
*CALL IN THE MANAGEMENT ROUTINE ASSOCIATED WITH THIS OBJECT
*
GOTOIT: LAC SQTRAN,I GET THE ADDRESS OF THE SUBROUTINE
DAC TEMP0 SAVE IT TO TRANSFER THROUGH
JMP TEMP0,I NOW TRANSFER THROUGH IT
.EJECT
NEXT: LAC SQTRAN GET THE TRANSFER VECTOR ENTRY FOR THE LAST OBJECT
AND (8*1024.-1) EXTRACT ADDRESS BITS
TAD (-SXTRAN-NUMSHP) END OF SHIP ENTRIES
SPA "SEE IF THIS OBJECT IS A BULLET
JMP NEXT1 NO, IT IS A SHIP

LAC (X$DTAB-1) ASSUME THAT THE NORMAL HANDICAP TABLE IS TO BE USED
SAD HANDI SEE IF IT'S ALREADY IN USE ANYWAY
JMP NEXT3 NO NEED TO COPY IT OVER IF SO

JMP NEXT2

NEXT1: LAC SWITCH GET BACK THE SWITCHES
AND (000200) SEE IF SWITCH 10 SET
SNA "YES, MUST INCREMENT TABLE POINTER
JMP NEXT3 NO, JUST USE NORMAL TABLE

LAC (100) INCREMENT HANDICAP TABLE POINTER
ADD HANDI

NEXT2: DAC HANDI UPDATE HANDICAP TABLE POINTER
DAC X6 SET UP AN AUTOINDEX REGISTER

LAW DTAB-1 GET A POINTER TO THE TABLE THE PROGRAM USES
DAC X7

LAW -RTIME+DTAB-1 GET THE COMPLEMENT OF THE SIZE FOR USE AS A COUNTER
DAC TEMP0 USE A TEMPORARY TO HOLD THE COUNTER

LAC X6,I ***
DAC X7,I * COPY OVER THE APPROPRIATE TABLE
ISZ TEMP0 ***
JMP .-3
.EJECT
NEXT3: ISZ SQTRAN
ISZ SQXLOC
ISZ SQYLOC
ISZ SQXVEL
ISZ SQYVEL
ISZ SQTIME
ISZ SQDIST

ISZ OBJCNT SEE IF DONE COLLISION CHECKING

DONE: HLT "NO, PROCEED TO CHECK NEXT OBJECT

JMP TWINKL YES, GO FORM THE SUN, MOVE THE STARS, AND WAIT

ISZ SQANGL
ISZ SQROLL
ISZ SQFUEL
ISZ SQBULL
ISZ SQPICP
ISZ SQPICN
ISZ SQWTIM
ISZ SQWFAC
ISZ SQINVF
ISZ SQINVT
ISZ SQDAMS
ISZ SQTTIM
ISZ SQBTIM
ISZ SQLTIM
ISZ SQRTIM

ISZ SHPCNT SEE IF DONE CHECKING SHIPS

JMP BUMP1 NO, CONTINUE UPDATING POINTERS USED FOR SHIPS ONLY

LAC (JMP BUMP1) YES, SO DON'T BOTHER UPDATING POINTERS USED FOR SHIPS ONLY
DAC DONE

JMP BUMP1 AND CONTINUE COLLISION CHECKING FOR BULLETS ON SCREEN
.EJECT
ZONK: LAC X5 SET UP A POINTER TO THE TRANSFER VECTOR
DAC TEMP0

ADD (SXTIME-SXTRAN) SET UP A POINTER TO THE TIMER
DAC TEMP1

LAC TEMP0,I GET THE TRANSFER VECTOR ENTRY FOR THIS OBJECT
AND (-8.*1024.-400000) CLEAR OUT OLD MANAGEMENT ROUTINE ADDRESS
ADD (BLOWUP+400000) REPLACE IT WITH THE ADDRESS OF THE EXPLOSION ROUTINE
DAC TEMP0,I PLUS THE BIT SIGNIFYING NON-EXISTENCE OF THE OBJECT

AND (-400000-1) REMOVE THE SIGN BIT FOR UPCOMING SHIFT
LRSS 18.-1-4 RIGHT JUSTIFY THE TYPE BITS IN AC
ADD (3) ADD THREE
CMA "TO GET THE AMOUNT OF TIME THIS EXPLOSION IS TO LAST
DAC TEMP1,I AND PUT IT IN THE TIMER CELL

LAC TEMP0,I GET BACK THE TRANSFER VECTOR ENTRY FOR THIS OBJECT
AND (300000) EXTRACT TYPE BITS
SNA "SKIP IF SHIP
JMP MAIM JUMP IF BULLET

ISZ NSHIP DECREMENT COUNTER OF SURVIVING SHIPS
NOP


KILL: LAC SQTRAN,I GET TRANSFER VECTOR ENTRY FOR THIS OBJECT
AND (300000) EXTRACT TYPE BITS
SNA "SKIP IF SHIP
JMP KILL1 JUMP IF BULLET

DZM SQBULL,I WIPE OUT ITS BULLETS

ISZ NSHIP COUNT SHIP BLOWN UP
NOP

KILL1: LAC SQTRAN,I GET THE TRANSFER VECTOR ENTRY FOR THIS OBJECT
AND (-8.*1024.-400000) CLEAR OUT OLD MANAGEMENT ROUTINE ADDRESS
ADD (BLOWUP+400000) REPLACE IT WITH THE ADDRESS OF THE EXPLOSION ROUTINE
DAC SQTRAN,I PLUS THE BIT SIGNIFYING NON-EXISTENCE OF THE OBJECT

AND (-400000-1) REMOVE THE SIGN BIT FOR UPCOMING SHIFT
LRSS 18.-1-4 RIGHT JUSTIFY THE TYPE BITS IN AC
ADD (3) ADD THREE
CMA "TO GET THE AMOUNT OF TIME THIS EXPLOSION IS TO LAST
DAC SQTIME,I AND PUT IT IN THE TIMER CELL

JMP GOTOIT AND GO TO IT
.EJECT
MAIM: LAC SWITCH GET BACK THE SWITCHES
AND (004000) ***
SNA "* SEE IF PARTIAL DAMAGE FEATURE IS DESIRED
JMP KILL ***

MAIM1: JMS RANDOM GET A PSEUDO-RANDOM NUMBER
AND (17) NARROW ITS RANGE
ADD (DTAB) SET UP FOR RANDOM SELECTION FROM BIT TABLE
DAC TEMP0 SET UP FOR INDIRECT
LAC TEMP0,I GET BITS CODING SWITCHES TO BE DISABLED

SAD (777777) FIRST CHECK FOR TOTAL DESTRUCTION
JMP KILL

AND SQDAMS,I AND OUT PREVIOUSLY DISABLED SWITCHES
AND (-001000-1) REMOVE INCIDENTAL DAMAGES FROM CONSIDERATION
SNA!RTL "AND SEE IF IT'S LEFT
JMP MAIM1 IF IT'S GONE, TRY TO DAMAGE SOMETHING ELSE

SNL!RAL "SEE IF LEFT TURN DISABLEMENT
JMP MAIM2 NO

LAC LTIME GET TIMER FOR LEFT TURN RESTORATION
DAC SQLTIM,I START IT TICKING

JMP MAIM5

MAIM2: SNL!RAL "SEE IF RIGHT TURN DISABLEMENT
JMP MAIM3 NO

LAC RTIME GET TIMER FOR RIGHT TURN RESTORATION
DAC SQRTIM,I START IT TICKING

JMP MAIM5

MAIM3: SNL!RAL "SEE IF THRUST DISABLEMENT
JMP MAIM4 NO

LAC SQFUEL,I SEE IF FUEL HAS RUN OUT
SNA "NO
JMP MAIM1 YES, NO SENSE DISABLING THRUST IN THAT CASE

LAC TTIME GET TIMER FOR THRUST RESTORATION
DAC SQTTIM,I START IT TICKING

JMP MAIM5

MAIM4: SNL "SEE IF BULLET-FIRING DISABLEMENT
JMP MAIM5 NO

LAC SQBULL,I SEE IF BULLET SUPPLY HAS BEEN EXHAUSTED
SNA "NO
JMP MAIM1 YES, NO SENSE DISABLING BULLETS IN THAT CASE

LAC BTIME GET TIMER FOR BULLET RESTORATION
DAC SQBTIM,I START IT TICKING

MAIM5: LAC SQDAMS,I GET PREVIOUSLY DISABLED SWITCHES
XOR TEMP0,I DISABLE ANOTHER ONE
AND (-010000-1) DISABLE INVISIBILITY
DAC SQDAMS,I UPDATE

JMP GOTOIT AND EXIT
.STITL OBJECT MANAGEMENT ROUTINES -- EXPLOSIONS
BLOWUP: LAC SQTRAN,I ***
AND (-400000-1) * CALCULATE THE SIZE OF THE EXPLOSION
LRSS 18.-3 ***
DAC TEMP0

LLSS 2 ***
ALSS 3 * CALCULATE THE DENSITY OF THE EXPLOSION
CMA "***
DAC TEMP1

LAC (040006) PUT A 'SET INTENSITY 2' COMMAND IN THE SCOPE BUFFER
DAC X0,I

BLOW1: JMS RANDOM GET A PSEUDO-RANDOM NUMBER
AND (3) ***
ADD TEMP0 * GENERATE AN 'ALSS' INSTRUCTION
ADD (ALSS 0) ***
DAC TEMP2

LAC RND GET BACK THE PSEUDO-RANDOM NUMBER
LRSS 10. ***
XCT TEMP2 * GENERATE A RANDOM X LOCATION FOR THIS POINT
ADD SQXLOC,I ***
DAC XLOC

LACQ "GET BACK THE PSEUDO-RANDOM NUMBER
LRSS 10. ***
XCT TEMP2 * GENERATE A RANDOM Y LOCATION FOR THIS POINT
ADD SQYLOC,I ***
DAC YLOC

JMS SCOPE DISPLAY ANOTHER POINT ON THE SCOPE

ISZ TEMP1 INCREMENT THE NUMBER OF POINTS WE GENERATED
JMP BLOW1 RETURN FOR MORE

ISZ SQTIME,I WHEN THE TIMER TIMES OUT, WE
JMP NEXT

DZM SQTRAN,I ZERO OUT SLOT IN TRANSFER VECTOR
JMP NEXT AND RETURN
.STITL BULLET MANAGEMENT ROUTINE
*
*
*BULLET MANAGEMENT ROUTINE
*
BULLET: JMS GRAV CALCULATE THE EFFECT OF GRAVITY ON THE BULLET
*
*
*REDUCE VELOCITY BY GRAVITY AND FRICTION FACTORS
*
JMS UPDATE REDUCE VELOCITY BY GRAVITY AND FRICTION FACTORS
*
*
*UPDATE THE POSITION OF THE BULLET ON THE SCREEN
*
LAC SQXLOC,I GET X LOCATION
DAC XLOC

LAC SQYLOC,I GET Y LOCATION
DAC YLOC

LAC (040007) PUT A 'SET INTENSITY 3' COMMAND IN THE SCOPE BUFFER
DAC X0,I

JMS SCOPE AND PUT THE POINT ON THE SCOPE
*
*
*DESTROY THE BULLET IF IT TIMES OUT
*
ISZ SQTIME,I INCREMENT THE BULLET TIMER
JMP NEXT

JMP KILL1 AND DESTROY IT IF IT TIMES OUT
.STITL SUN    MANAGEMENT ROUTINE
*
*
*SUN MANAGEMENT ROUTINE
*
TWINKL: LAC (040007) PUT A 'SET INTENSITY 3' COMMAND IN THE SCOPE BUFFER
DAC X0,I

DZM XLOC ZERO X-COORDINATE
DZM YLOC ZERO Y-COORDINATE

JMS SCOPE DRAW THE POINT IN THE CENTER

LAC (040006) PUT A 'SET INTENSITY 2' COMMAND IN THE SCOPE BUFFER
DAC X0,I

JMS RANDOM GET A PSEUDO-RANDOM NUMBER
AND (004747) MASK TO 'SHORT VECTOR' X AND Y COMPONENTS
XOR (220000) OR IN THE 'DRAW SHORT VECTOR' COMMAND
DAC X0,I PUT THE RESULTANT COMMAND IN THE SCOPE BUFFER

LAC (040007) PUT A 'SET INTENSITY 3' COMMAND IN THE SCOPE BUFFER
DAC X0,I

JMS SCOPE REDRAW THE POINT IN THE CENTER

LAC (040006) PUT A 'SET INTENSITY 2' COMMAND IN THE SCOPE BUFFER
DAC X0,I

LAC RND GET BACK THE PSEUDO-RANDOM NUMBER
AND (004747) MASK TO 'SHORT VECTOR' X AND Y COMPONENTS
XOR (224040) OR IN THE 'DRAW SHORT VECTOR' COMMAND
DAC X0,I PUT THE RESULTANT COMMAND IN THE SCOPE BUFFER


LAC (400000) ***
ADD PSCBUF * LINK THE STAR SCOPE BUFFER ONTO THE END OF THE CURRENT SCOPE BUFFER
DAC X0,I ***

LAC OFFSET ***
CMA "* FLIP THE OFFSET -- EFFECTIVELY SWAP SCOPE BUFFERS
DAC OFFSET ***

ADD STREND,I AND ADD IT TO THE STAR BUFFER TRAP WORD
DAC STREND,I SO THAT IT POINTS TO THE BUFFER WE JUST WROTE
.STITL STAR   MANAGEMENT ROUTINE
*
*
*STAR MANAGEMENT ROUTINE
*
ISZ STIMER HAS TIMER TIMED OUT YET?
JMP THREE NO, DON'T MOVE THE STARS UNTIL IT DOES

LAW -16.-1 INITIALIZE THE STAR TIMER
DAC STIMER

ISZ SRANGE INCREMENT X-COORDINATE RANGE
NOP

LAC PSBUF1 GET A POINTER TO THE STAR SCOPE BUFFER
DAC X1
*
*
*MOVE THE STARS FROM LEFT TO RIGHT ON THE SCREEN
*
STARS1: ISZ X1,I MOVE A STAR FROM LEFT TO RIGHT

ISZ X1 BUMP STAR TABLE POINTER
ISZ X1

STARS2: LAC X1 GET BACK POINTER TO STAR TABLE
SAD PSBUF2 SEE IF AT BEGINNING OF STAR SCOPE BUFFER
JMP STARS3 YES

SAD STREND SEE IF AT END OF STAR SCOPE BUFFER
SKP "YES
JMP STARS1 NO, CONTINUE

LAC PSCBUF ***
DAC X1 * RESET POINTER TO STAR SCOPE BUFFER
ISZ X1 ***

JMP STARS2 AND THEN CONTINUE
.EJECT
*
*
*MOVE STARS OFF RIGHT EDGE OF SCREEN
*
STARS3: LAC PSBUF1 ***
DAC TEMP0 * GET A POINTER TO THE STAR SCOPE BUFFER
ISZ TEMP0 ***

LAC TEMP0,I GET A STAR
AND (2000) COMPARE X-COORDINATE WITH WIDTH OF SCREEN
SNA "TO SEE IF MOVING OFF RIGHT EDGE OF SCREEN
JMP STARS4 NO

LAC (300000) YES

DAC PSBUF1,I CLEAR OUT 'SET INTENSITY' SCOPE COMMAND
ISZ PSBUF1

DAC PSBUF1,I CLEAR OUT 'MOVE TO X' SCOPE COMMAND
ISZ PSBUF1

DAC PSBUF1,I CLEAR OUT 'MOVE TO Y' SCOPE COMMAND
ISZ PSBUF1

LAC PSBUF1 GET BACK POINTER
SAD STREND SEE IF AT END OF STAR SCOPE BUFFER
SKP "YES
JMP STARS3 NO, CONTINUE CHECKING FOR EXPIRED STARS

LAC PSCBUF ***
DAC PSBUF1 * RESET POINTER TO STAR SCOPE BUFFER
ISZ PSBUF1 ***

JMP STARS3 AND THEN CONTINUE CHECKING FROM THE BEGINNING
.EJECT
*
*
*MOVE STARS ONTO LEFT EDGE OF SCREEN
*
STARS4: LAC PSTABL,I GET X-COORDINATE
ADD SRANGE SEE IF ON SCOPE
SPA
JMP THREE NO, DONE, EXIT

DAC TEMP0 SAVE X-COORDINATE

ISZ PSTABL INCREMENT STAR TABLE POINTER

LAC PSTABL,I GET Y-COORDINATE AND INTENSITY
ISZ PSTABL INCREMENT STAR TABLE POINTER
LMQ!EAECLA!LLSS 3 RIGHT JUSTIFY INTENSITY IN AC
XOR (040000) OR IN SCOPE COMMAND
DAC PSBUF2,I PUT IN STAR SCOPE BUFFER
ISZ PSBUF2 INCREMENT STAR SCOPE BUFFER POINTER

LAC TEMP0 GET BACK X-COORDINATE
XOR (140000) OR IN SCOPE COMMAND
DAC PSBUF2,I PUT IN STAR SCOPE BUFFER
ISZ PSBUF2 INCREMENT STAR SCOPE BUFFER POINTER

EAECLA!LLSS 18.-3 GET BACK Y-COORDINATE
XOR (174000) OR IN SCOPE COMMAND
DAC PSBUF2,I PUT IN STAR SCOPE BUFFER
ISZ PSBUF2 INCREMENT STAR SCOPE BUFFER POINTER

LAC PSBUF2 ***
SAD STREND * SEE IF AT END OF STAR SCOPE BUFFER
SKP "***
JMP STARS5 NO

LAC PSCBUF ***
DAC PSBUF2 * YES, RESET POINTER TO BEGINNING OF STAR SCOPE BUFFER
ISZ PSBUF2 ***

STARS5: LAC PSTABL ***
SAD ENDTAB * SEE IF AT END OF STAR TABLE
SKP "***
JMP STARS4 ***
LAC (STABLE) * YES, RESET POINTER TO BEGINNING OF STAR TABLE
DAC PSTABL ***

LAC SRANGE ***
ADD (-8.*1024.-1) * REINITIALIZE X-COORDINATE RANGE
DAC SRANGE ***

JMP STARS4
.STITL SHIP   MANAGEMENT ROUTINES
*
*
*SHIP 1 MANAGEMENT ROUTINE
*
S1SHIP: JMS BUTTIN GET THE PUSHBUTTONS FOR SHIP 1
JMP SXSHIP-1
*
*
*SHIP 2 MANAGEMENT ROUTINE
*
S2SHIP: JMS BUTTIN GET THE PUSHBUTTONS FOR SHIP 2
JMP SXSHIP
*
*
*SHIP 3 MANAGEMENT ROUTINE
*
S3SHIP: LAC SWITCH GET BACK THE SWITCHES
CMA "INVERT
ALS 12. GET THE PUSHBUTTONS FOR SHIP 3
*
*
*SHIP   MANAGEMENT ROUTINE
*
SXSHIP: DAC BUTINS SAVE THE PUSHBUTTONS

LAC (JMP FIRE) GET AN APPROPRIATE INSTRUCTION TO PUT
DAC DRAWJ IN SUCH A PLACE AS NOT TO PRINT A JET ON THE SHIP

ISZ SQTIME,I INCREMENT THE BULLET INTERVAL TIMER
NOP

ISZ SQWTIM,I INCREMENT THE AMOUNT OF TIME UNTIL NEXT POSSIBLE WARP TIMER
NOP

LAC SWITCH GET BACK THE SWITCHES
CMA "INVERT

AND (770000) SAVE JUST THE DISABLE BITS
AND BUTINS GET ONLY THE PERMITTED PUSHBUTTONS
AND SQDAMS,I TAKE INTO ACCOUNT INDIVIDUAL DISABILITIES

DAC BUTINS SAVE THE PERMITTED PUSHBUTTONS FOR OTHER ROUTINES
.STITL SHIP   MANAGEMENT ROUTINES -- WARP
*
*
*CHECK FOR WARP
*
SPA!CMA "SEE IF THE PLAYER SEEKS TO ESCAPE FROM REALITY

LAC SQWTIM,I ***
SPA "* CHECK AMOUNT OF TIME BETWEEN WARP TO SEE IF IT'S PERMITTED AGAIN YET
JMP VISIBL ***

LAC SQTRAN,I GET THE OLD MANAGEMENT ROUTINE ADDRESS
DAC SQWTIM,I SAVE IT

LAW VANISH GET THE NEW MANAGEMENT ROUTINE ADDRESS
DAC SQTRAN,I PUT IT IN THE TRANSFER VECTOR

LAC WTIME GET THE AMOUNT OF TIME THAT A WARP LASTS
DAC SQTIME,I START TIMING

JMP NEXT AND RETURN
.EJECT
*
*
*MAKE THE SHIP DISAPPEAR AND REAPPEAR ELSEWHERE
*
VANISH: ISZ SQTIME,I IS IT TIME TO COME BACK YET?
JMP NEXT NO, SO RETURN

LAC (PREVUE+300000) YES, GET THE ADDRESS OF THE WARP STAR ROUTINE
DAC SQTRAN,I AND PUT IT IN THE TRANSFER VECTOR

LAC STIME GET THE AMOUNT OF TIME THAT A WARP STAR LASTS
DAC SQTIME,I PUT IT IN THE TIMER

JMS RANDOM GET A PSEUDO-RANDOM NUMBER
XCT WAREA MODIFY IT ACCORDING TO THE HANDICAP TABLE
ADD SQXLOC,I ADD THE PREVIOUS X LOCATION
DAC SQXLOC,I TO GET A NEW, RANDOM X LOCATION

JMS RANDOM GET A PSEUDO-RANDOM NUMBER
XCT WAREA MODIFY IT ACCORDING TO THE HANDICAP TABLE
ADD SQYLOC,I ADD THE PREVIOUS Y LOCATION
DAC SQYLOC,I TO GET A NEW, RANDOM Y LOCATION

JMP NEXT AND RETURN
.EJECT
*
*
*MAKE WARP STAR
*
PREVUE: LAC (040006) PUT A 'SET INTENSITY 2' COMMAND IN THE SCOPE BUFFER
DAC X0,I

LAC SQXLOC,I SET UP THE X LOCATION
DAC XLOC

LAC SQYLOC,I SET UP THE Y LOCATION
DAC YLOC

JMS SCOPE AND PUT THE STAR ON THE SCOPE

ISZ SQTIME,I INCREMENT THE WARP STAR TIMER
JMP NEXT AND RETURN IF NON-ZERO

LAC SQWFAC,I IF ZERO, GET THE OLD WARP FACTOR
ADD WFACT MODIFY IT ACCORDING TO THE HANDICAP TABLE
DAC SQWFAC,I TO GET A NEW WARP FACTOR

JMS RANDOM GET A PSEUDO-RANDOM NUMBER
SMA "IS IT A NEGATIVE PSEUDO-RANDOM NUMBER?
CMA "NO, SO TURN IT INTO ONE

ADD SQWFAC,I ***
SMA "* WAS THIS WARP FATAL?
JMP FATALW ***

LAC SQWTIM,I WE SURVIVED
DAC SQTRAN,I SO RESTORE THE OLD TRANSFER VECTOR ENTRY

JMS RANDOM GET A PSEUDO-RANDOM NUMBER
XCT WVELO MODIFY IT ACCORDING TO THE HANDICAP TABLE
DAC SQXVEL,I SET IT UP AS THE NEW X VELOCITY

JMS RANDOM GET A PSEUDO-RANDOM NUMBER
XCT WVELO MODIFY IT ACCORDING TO THE HANDICAP TABLE
DAC SQYVEL,I SET IT UP AS THE NEW Y VELOCITY

LAC RND GET BACK THE PSEUDO-RANDOM NUMBER
DAC SQANGL,I GET A NEW ANGLE

RTL
LRSS 4
DAC SQROLL,I AND A NEW ROLL

LAC DTIME GET THE AMOUNT OF TIME UNTIL NEXT POSSIBLE WARP
DAC SQWTIM,I ENTER IT IN THE OBJECT DEFINITION TABLE

JMP NEXT AND RETURN
.EJECT
*
*
*SET UP FOR EXPLOSION
*
FATALW: LAC (BLOWUP+300000+400000) GET THE ADDRESS OF THE EXPLOSION ROUTINE
DAC SQTRAN,I ENTER IT IN THE OBJECT DEFINITION TABLE

LAW -16.-1 GET THE AMOUNT OF TIME THAT AN EXPLOSION LASTS
DAC SQTIME,I AND PUT IT IN THE TIMER SLOT

DZM SQBULL,I WIPE OUT ITS BULLETS

ISZ NSHIP ***
JMP NEXT * DECREMENT COUNTER OF SURVIVING SHIPS
JMP NEXT ***
.STITL SHIP   MANAGEMENT ROUTINES -- INVISIBILITY
*
*
*CHECK FOR INVISIBILITY
*
VISIBL: ISZ SQINVT,I INCREMENT THE AMOUNT OF TIME SINCE WE LAST CHANGED STATE
NOP

LAC BUTINS GET THE PUSHBUTTONS
AND (010000) SEE IF A CHANGE OF STATE IS DESIRED
SZA!CMA

LAC SQINVT,I ***
SPA "* SEE IF IT'S PERMITTED AGAIN YET
JMP BEJUST ***

LAW -30.-1 RESET THE INVISIBILITY TIMER TO ONE SECOND
DAC SQINVT,I

XOR SQINVF,I CHANGE THE STATE OF THE INVISIBILITY FLAG
DAC SQINVF,I
.STITL SHIP   MANAGEMENT ROUTINES -- CONTROL RESTORATION
*
*
*GIVE UNFORTUNATE PLAYER WHO HAS LOST HIS THRUST A SECOND CHANCE
*
BEJUST: LAC SQDAMS,I GET SHIP'S DAMAGES
AND (040000) EXTRACT THRUSTING BIT
SNA "SKIP IF STILL THERE

ISZ SQTTIM,I INCREMENT TIMER
JMP BEFAIR IT HASN'T TIMED OUT YET

LAC SQDAMS,I GET BACK DAMAGES
XOR (040000) RESTORE THRUSTING CAPABILITY
DAC SQDAMS,I PUT BACK DAMAGES
*
*
*GIVE UNFORTUNATE PLAYER WHO HAS LOST HIS BULLETS A SECOND CHANCE
*
BEFAIR: LAC SQDAMS,I GET SHIP'S DAMAGES
AND (020000) EXTRACT BULLET-FIRING BIT
SNA "SKIP IF STILL THERE

ISZ SQBTIM,I INCREMENT TIMER
JMP BEKIND IT HASN'T TIMED OUT YET

LAC SQDAMS,I GET BACK DAMAGES
XOR (020000) RESTORE BULLET-FIRING CAPABILITY
DAC SQDAMS,I PUT BACK DAMAGES
.EJECT
*
*
*GIVE UNFORTUNATE PLAYER WHO HAS LOST HIS LEFT TURN A SECOND CHANCE
*
BEKIND: LAC SQDAMS,I GET SHIP'S DAMAGES
AND (200000) EXTRACT LEFT TURNING BIT
SNA "SKIP IF STILL THERE

ISZ SQLTIM,I INCREMENT TIMER
JMP BENICE IT HASN'T TIMED OUT YET

LAC SQDAMS,I GET BACK DAMAGES
AND (-001000-1) EXCLUDING INCIDENTAL DAMAGES
XOR (201000) RESTORE LEFT TURNING CAPABILITY; TURN OFF ANGULAR MOMENTUM
DAC SQDAMS,I PUT BACK DAMAGES
*
*
*GIVE UNFORTUNATE PLAYER WHO HAS LOST HIS RIGHT TURN A SECOND CHANCE
*
BENICE: LAC SQDAMS,I GET SHIP'S DAMAGES
AND (100000) EXTRACT RIGHT TURNING BIT
SNA "SKIP IF STILL THERE

ISZ SQRTIM,I INCREMENT TIMER
JMP CALROL IT HASN'T TIMED OUT YET

LAC SQDAMS,I GET BACK DAMAGES
AND (-001000-1) EXCLUDING INCIDENTAL DAMAGES
XOR (101000) RESTORE LEFT TURNING CAPABILITY; TURN OFF ANGULAR MOMENTUM
DAC SQDAMS,I PUT BACK DAMAGES
.STITL SHIP   MANAGEMENT ROUTINES -- TURNING
*
*
*CALCULATE ROLL
*
CALROL: LAC ROLL STICK USER PARAMETER IN PROGRAM
DAC ROLFAC

LAC BUTINS GET THE PUSHBUTTONS
RAL "PUT THE LEFT ROLL BIT IN AC0 AND THE RIGHT IN AC1
CMA "CHANGE THEIR SIGNS
GSM "GET A POSITIVE NUMBER
AND (600000) MASK OUT LOW ORDER BITS

MULS "AND MULTIPLY BY THE ROLL CONSTANT
ROLFAC: 0

LLSS 2 DOUBLE THE RESULT

LMQ "***
ADD SQROLL,I * INCREMENT THE ROLL, ASSUMING ANGULAR MOMENTUM IS ON
DAC SQROLL,I ***

LAC SWITCH GET BACK THE SWITCHES
AND (001000) SEE IF ANGULAR MOMENTUM IS ON
SNA!CLA "IF SO, NOTHING MORE TO DO

LAC SQDAMS,I GET DAMAGES INCURRED
AND (001000) ***
SNA "* SEE IF ANGULAR MOMENTUM IS ON -- IF SO, NOTHING MORE TO DO
JMP CALANG ***

LACQ "***
ALSS 5 * ANGULAR MOMENTUM IS OFF -- SO REDUCE THE ROLL
DAC SQROLL,I ***
*
*
*CALCULATE ANGLE
*
CALANG: LAC SQANGL,I ***
ADD SQROLL,I * ADD THE ROLL TO THE OLD ANGLE TO CALCULATE THE NEW ANGLE
DAC SQANGL,I ***

JMS SINCOS CALCULATE THE SINE AND COSINE OF THE ANGLE

JMS GRAV AND GET THE EFFECT OF GRAVITY ON THIS SHIP
.STITL SHIP   MANAGEMENT ROUTINES -- THRUSTING
*
*
*CHECK FOR THRUSTING
*
LAC BUTINS GET THE PUSHBUTTONS
AND (040000) SEE IF THRUSTING
SZA

LAC SQFUEL,I ***
SMA "* CHECK FUEL SUPPLY
JMP DRAWP ***

LAC COSINE GET THE COSINE OF THE ANGLE OF THE SHIP
XCT THRUS MODIFY IT ACCORDING TO THE HANDICAP TABLE
ADD XGRAV ADD THE EFFECT OF GRAVITY
DAC XGRAV TO GET A COMPOSITE EFFECT ON THE X VELOCITY

LAC SINE GET THE SINE OF THE ANGLE OF THE SHIP
XCT THRUS MODIFY IT ACCORDING TO THE HANDICAP TABLE
ADD YGRAV ADD THE EFFECT OF GRAVITY
DAC YGRAV TO GET A COMPOSITE EFFECT ON THE Y VELOCITY

LAC (NOP) PUT A 'NOP' INSTRUCTION IN
DAC DRAWJ 'DRAWJ' TO PRINT A JET ON THE SHIP

ISZ SQFUEL,I DECREMENT THE AMOUNT OF FUEL LEFT
NOP
.EJECT
DRAWP: JMS UPDATE REDUCE VELOCITY BY GRAVITY AND FRICTION FACTORS


JMS DRAWS GO DRAW THE PICTURE OF THE SHIP


DRAWJ: HLT "WE PUT A 'NOP' INSTRUCTION HERE IF WE ARE THRUSTING
"OTHERWISE WE PUT A 'JMP FIRE' HERE

LAC (040006) PUT A 'SET INTENSITY 2' COMMAND IN THE SCOPE BUFFER
DAC X0,I

JMS RANDOM GET A PSEUDO-RANDOM NUMBER
STL "***
LRS 14. * CALCULATE THE LENGTH OF THE JET
DAC TEMP0 ***

LAC COSINE GET THE COSINE OF THE SHIP'S ANGLE
CMA "***
LRSS 6 * GRANULARIZE THE COSINE FOR USE IN DRAWING THE JET
DAC MCOS ***

LAC SINE GET THE SINE OF THE SHIP'S ANGLE
CMA "***
LRSS 6 * GRANULARIZE THE SINE FOR USE IN DRAWING THE JET
DAC MSIN ***

DRAWJ1: LAC XLOC ***
ADD MCOS * UPDATE X LOCATION
DAC XLOC ***

LAC YLOC ***
ADD MSIN * UPDATE Y LOCATION
DAC YLOC ***

JMS SCOPE DRAW A POINT OF THE JET ON THE SCOPE

ISZ TEMP0 HAVE WE REACHED THE TAIL END?
JMP DRAWJ1 NO, LOOP BACK TO DRAW ANOTHER POINT
.STITL SHIP   MANAGEMENT ROUTINES -- FIRING BULLETS
*
*
*CHECK FOR BULLET-FIRING
*
FIRE: LAC BUTINS GET THE PUSHBUTTONS
AND (020000) SEE IF FIRING BULLETS
SZA!CMA

LAC SQTIME,I SEE IF SHIP IS ALLOWED TO FIRE ANOTHER BULLET YET
SMA!CMA

LAC SQBULL,I ***
SMA "* SEE IF IN FACT SHIP HAS ANY BULLETS LEFT TO FIRE
JMP NEXT ***
*
*
*SEARCH FOR A VACANT SLOT IN THE TRANSFER VECTOR
*
LAC (LAC TRNEND) GET AN INSTRUCTION WHICH WILL PICK UP THE LAST TRANSFER VECTOR ENTRY

FIRE1: DAC FIRE2 STICK IT IN THE PROGRAM

FIRE2: HLT

SNA!CLC "DID WE FIND A HOLE?
JMP FIRE3 YES

TAD FIRE2 BACK UP ONE ENTRY IN THE TRANSFER VECTOR

SAD (LAC SXTRAN+NUMSHP-1) IS THE TRANSFER VECTOR FULL?
JMP NEXT YES, SO NO MORE BULLETS

JMP FIRE1 NO, CONTINUE SEARCH FOR FREE ENTRY IN TRANSFER VECTOR
.EJECT
*
*
*SET UP THE VARIOUS PARAMETERS WHICH DEFINE THIS OBJECT ON THE SCREEN
*
FIRE3: LAC (BULLET+020000) GET A POINTER TO THE BULLET MANAGEMENT SUBROUTINE
DAC FIRE2,I AND PUT IT IN THE TRANSFER VECTOR

LAC FIRE2
ADD (SXXLOC-SXTRAN) SET UP A POINTER TO THE X LOCATION
DAC TEMP0

ADD (SXYLOC-SXXLOC) SET UP A POINTER TO THE Y LOCATION
DAC TEMP1

ADD (SXXVEL-SXYLOC) SET UP A POINTER TO THE X VELOCITY
DAC TEMP2

ADD (SXYVEL-SXXVEL) SET UP A POINTER TO THE Y VELOCITY
DAC TEMP3

ADD (SXTIME-SXYVEL) SET UP A POINTER TO THE TIMER
DAC FIRE2

LAC COSINE ***
LRSS 2 * GENERATE THE X LOCATION
ADD SQXLOC,I ***
DAC TEMP0,I

LAC SINE ***
LRSS 2 * GENERATE THE Y LOCATION
ADD SQYLOC,I ***
DAC TEMP1,I

LAC COSINE ***
XCT BLVEL * GENERATE THE X VELOCITY
ADD SQXVEL,I ***
DAC TEMP2,I

LAC SINE ***
XCT BLVEL * GENERATE THE Y VELOCITY
ADD SQYVEL,I ***
DAC TEMP3,I

LAC BLTIM GET THE AMOUNT OF TIME THAT A BULLET LASTS
DAC FIRE2,I INITIALIZE THE BULLET'S TIMER

LAC BLINT GET THE INTERVAL THAT BULLETS CAN BE SHOT
DAC SQTIME,I INITIALIZE THE SHIP'S TIMER

ISZ SQBULL,I ***
JMP NEXT * DECREMENT THE BULLET SUPPLY AND RETURN
JMP NEXT ***
.STITL SHIP   MANAGEMENT ROUTINES
*
*
*REDUCE VELOCITY BY GRAVITY AND FRICTION FACTORS
*
UPDATE: XX

LAC FRICT ***
DAC FRIC1 * STICK USER PARAMETER IN PROGRAM
DAC FRIC2 ***

*
*
*UPDATE X PARAMETERS: X VELOCITY AND X LOCATION
*
LAC XGRAV ***
ADD SQXVEL,I * REDUCE X VELOCITY BY GRAVITY
CLL "***

MULS "REDUCE X VELOCITY BY FRICTION FACTOR
FRIC1: 0

LLSS 1 UPDATE REDUCED X VELOCITY
DAC SQXVEL,I

LRSS 3 ***
ADD SQXLOC,I * UPDATE X LOCATION ACCORDING TO X VELOCITY
DAC SQXLOC,I ***

*
*
*UPDATE Y PARAMETERS: Y VELOCITY AND Y LOCATION
*
LAC YGRAV ***
ADD SQYVEL,I * REDUCE Y VELOCITY BY GRAVITY
CLL "***

MULS "REDUCE Y VELOCITY BY FRICTION FACTOR
FRIC2: 0

LLSS 1 UPDATE REDUCED Y VELOCITY
DAC SQYVEL,I

LRSS 3 ***
ADD SQYLOC,I * UPDATE Y LOCATION ACCORDING TO Y VELOCITY
DAC SQYLOC,I ***

JMP UPDATE,I EXIT
.STITL SHIP   MANAGEMENT ROUTINES -- DRAWING THE PICTURE
DRAWS: XX

LAC SINE ***
LRSS 7 * GRANULARIZE THE SINE FOR USE IN DRAWING THE PICTURE
DAC SIN ***

CMA "COMPLEMENT THE RESULT FOR USE IN DRAWING THE PICTURE
DAC MSIN

LAC COSINE ***
LRSS 7 * GRANULARIZE THE COSINE FOR USE IN DRAWING THE PICTURE
DAC COS ***

CMA "COMPLEMENT THE RESULT FOR USE IN DRAWING THE PICTURE
DAC MCOS

ADD MSIN CALCULATE THE GRANULARIZED -SINE-COSINE FOR USE DRAWING THE PICTURE
DAC MSNMCS

LAC SIN ***
ADD MCOS * CALCULATE THE GRANULARIZED SINE-COSINE FOR USE IN DRAWING THE PICTURE
DAC SINMCS ***

CMA "FINALLY, CALCULATE THE GRANULARIZED COSINE-SINE
DAC CSMSIN FOR USE IN DRAWING THE PICTURE OF THE SHIP

LAC COSINE
LRSS 3 ***
ADD SQXLOC,I * CALCULATE THE X-COORDINATE OF THE FRONT OF THE SHIP
DAC XFRONT ***

LAC SINE
LRSS 3 ***
ADD SQYLOC,I * CALCULATE THE Y-COORDINATE OF THE FRONT OF THE SHIP
DAC YFRONT ***

LAC (040005) PUT A 'SET INTENSITY 1' COMMAND IN THE SCOPE BUFFER
DAC X0,I
.EJECT
LAC (JMP DRAWLH) INITIALIZE POINTER TO FIRST COMMAND TABLE
DAC DRAWT

LAW -1 INITIALIZE THE '6' COMMAND SWITCH: 'SAVE CURRENT POINTER'
DAC TEMP0

LAC SQDAMS,I GET SHIP'S DAMAGES
CMA!OAS "AND ITS DISABLEMENTS

JMP DRAW2

DRAW1: LAC SQDAMS,I GET SHIP'S DAMAGES
CMA!OAS "AND ITS DISABLEMENTS

RAL

DRAW2: RTL

LAC SQPICN,I SHOW THAT FIN IS MISSING
SNL
LAC SQPICP,I SHOW THAT FIN IS STILL THERE

DAC X5 SET UP A POINTER TO THE PICTURE

LAC XFRONT GET THE X LOCATION OF THE FRONT OF THE SHIP
DAC XLOC

LAC YFRONT GET THE Y LOCATION OF THE FRONT OF THE SHIP
DAC YLOC

DRAW3: LAC X5,I GET THE NEXT WORD OF COMMANDS
DAC TEMP3

LAW -6-1 INITIALIZE THE SIX-PER-WORD OCTIT COUNTER
DAC TEMP2

DRAWN: ISZ TEMP2 CHECK IF THIS WORD IS DONE
SKP
JMP DRAW3 YES

LAC TEMP3 GET BACK RESULT OF LAST SHIFT
CLL
LMQ!EAECLA!LLS 3 GET THE NEXT COMMAND
ADD DRAWT RELATIVE TO THE BEGINNING OF THE COMMAND TABLE
DAC DRAWX

LACQ "SAVE THE REMAINDER OF THE COMMAND WORD
DAC TEMP3
.EJECT
*
*
*GO EXECUTE THE COMMAND
*
DRAWX: HLT "GO EXECUTE THE COMMAND
*
*
*COMMANDS TO DRAW THE LEFT HALF OF THE SHIP
*
DRAWLH: JMP DRAWU 0 = DRAW A POINT STRAIGHT UP

JMP DRAWD 1 = DRAW A POINT STRAIGHT DOWN

JMP DRAWL 2 = DRAW A POINT TO THE LEFT

JMP DRAWDL 3 = DRAW A POINT DIAGONALLY DOWN TO THE LEFT

JMP DRAWR 4 = DRAW A POINT TO THE RIGHT

JMP DRAWDR 5 = DRAW A POINT DIAGONALLY DOWN TO THE RIGHT

JMP DRAWSP 6 = SAVE A POINTER TO THIS LOCATION OR RESTORE OLD LOCATION

LAC (JMP DRAWRH) 7 = DONE
DAC DRAWT

JMP DRAW1
*
*
*COMMANDS TO DRAW THE RIGHT HALF OF THE SHIP
*
DRAWRH: JMP DRAWU 0 = DRAW A POINT STRAIGHT UP

JMP DRAWD 1 = DRAW A POINT STRAIGHT DOWN

JMP DRAWR 2 = DRAW A POINT TO THE RIGHT

JMP DRAWDR 3 = DRAW A POINT DIAGONALLY DOWN TO THE RIGHT

JMP DRAWL 4 = DRAW A POINT TO THE LEFT

JMP DRAWDL 5 = DRAW A POINT DIAGONALLY DOWN TO THE LEFT

JMP DRAWSP 6 = SAVE A POINTER TO THIS LOCATION OR RESTORE OLD LOCATION

JMP DRAWS,I 7 = DONE
.EJECT
*
*
*LEFT 0 = RIGHT 0 = DRAW A POINT STRAIGHT UP
*
DRAWU: LAC XLOC ***
ADD COS * INCREMENT THE X LOCATION BY THE COSINE
DAC XLOC ***

LAC YLOC ***
ADD SIN * INCREMENT THE Y LOCATION BY THE SINE
DAC YLOC ***

LAC SQINVF,I ***
SNA "* CHECK FOR INVISIBILITY
JMS SCOPE ***

JMP DRAWN GO GET NEXT COMMAND
*
*
*LEFT 1 = RIGHT 1 = DRAW A POINT STRAIGHT DOWN
*
DRAWD: LAC XLOC ***
ADD MCOS * DECREMENT THE X LOCATION BY THE COSINE
DAC XLOC ***

LAC YLOC ***
ADD MSIN * DECREMENT THE Y LOCATION BY THE SINE
DAC YLOC ***

LAC SQINVF,I ***
SNA "* CHECK FOR INVISIBILITY
JMS SCOPE ***

JMP DRAWN GO GET NEXT COMMAND
.EJECT
*
*
*LEFT 2 = RIGHT 4 = DRAW A POINT TO THE LEFT
*
DRAWL: LAC XLOC ***
ADD MSIN * DECREMENT THE X LOCATION BY THE SINE
DAC XLOC ***

LAC YLOC ***
ADD COS * INCREMENT THE Y LOCATION BY THE COSINE
DAC YLOC ***

LAC SQINVF,I ***
SNA "* CHECK FOR INVISIBILITY
JMS SCOPE ***

JMP DRAWN GO GET NEXT COMMAND
*
*
*LEFT 3 = RIGHT 5 = DRAW A POINT DIAGONALLY DOWN TO THE LEFT
*
DRAWDL: LAC XLOC ***
ADD MSNMCS * DECREMENT THE X LOCATION BY THE SINE
DAC XLOC ***

LAC YLOC ***
ADD CSMSIN * INCREMENT THE Y LOCATION BY THE COSINE; DECREMENT BY THE SINE
DAC YLOC ***

LAC SQINVF,I ***
SNA "* CHECK FOR INVISIBILITY
JMS SCOPE ***

JMP DRAWN GO GET NEXT COMMAND
.EJECT
*
*
*LEFT 4 = RIGHT 2 = DRAW A POINT TO THE RIGHT
*
DRAWR: LAC XLOC ***
ADD SIN * INCREMENT THE X LOCATION BY THE SINE
DAC XLOC ***

LAC YLOC ***
ADD MCOS * DECREMENT THE Y LOCATION BY THE COSINE
DAC YLOC ***

LAC SQINVF,I ***
SNA "* CHECK FOR INVISIBILITY
JMS SCOPE ***

JMP DRAWN GO GET NEXT COMMAND
*
*
*LEFT 5 = RIGHT 3 = DRAW A POINT DIAGONALLY DOWN TO THE RIGHT
*
DRAWDR: LAC XLOC ***
ADD SINMCS * INCREMENT THE X LOCATION BY THE SINE; DECREMENT BY THE COSINE
DAC XLOC ***

LAC YLOC ***
ADD MSNMCS * DECREMENT THE Y LOCATION BY THE SINE AND COSINE
DAC YLOC ***

LAC SQINVF,I ***
SNA "* CHECK FOR INVISIBILITY
JMS SCOPE ***

JMP DRAWN GO GET NEXT COMMAND
.EJECT
*
*
*LEFT 6 = RIGHT 6 = SAVE A POINTER TO THIS LOCATION
*
DRAWSP: ISZ TEMP0 SKIP IF SAVING
JMP DRAWRP JUMP IF RESTORING

LAC XLOC SAVE CURRENT X LOCATION
DAC TEMP0

LAC YLOC SAVE CURRENT Y LOCATION
DAC TEMP1

JMP DRAWN AND GO GET NEXT COMMAND
*
*
*LEFT 6 = RIGHT 6 = RESTORE OLD LOCATION
*
DRAWRP: LAW -1-1 READJUST INCREMENTED X LOCATION
ADD TEMP0
DAC XLOC SET UP FOR SCOPE DRAWING SUBROUTINE

LAC TEMP1 GET BACK THE Y LOCATION
DAC YLOC SET UP FOR SCOPE DRAWING SUBROUTINE

LAW -1 SET SWITCH TO INTERPRET '6' COMMAND
DAC TEMP0 AS 'SAVE CURRENT POINTER' (NOT 'RESTORE CURRENT POINTER')

JMP DRAWN GO GET NEXT COMMAND
.EJECT
*
*
*CONSTANTS USED IN DRAWING THE PICTURE
*
XFRONT: .BLOCK 1 X LOCATION OF THE FRONT OF THE SHIP (WHENCE BULLETS EMERGE)
YFRONT: .BLOCK 1 Y LOCATION OF THE FRONT OF THE SHIP (WHENCE BULLETS EMERGE)

SIN: .BLOCK 1
COS: .BLOCK 1

MSIN: .BLOCK 1
MCOS: .BLOCK 1

MSNMCS: .BLOCK 1

SINMCS: .BLOCK 1
CSMSIN: .BLOCK 1

DRAWT: JMP DRAWT
.STITL SHIP   MANAGEMENT ROUTINES -- DRAWING THE PICTURE -- SHIPS
*
*
*PUSHBUTTON 0
*
SBANK: LAW S1PIC-1 POINT TO THE PICTURE OF THE LONG, SLIM SHIP
LAW S1PICD-1
*
*
*PUSHBUTTON 1
*
LAW S2PIC-1 POINT TO THE PICTURE OF THE SHORT, FAT SHIP
LAW S2PICD-1
*
*
*PUSHBUTTON 2
*
LAW S3PIC-1 POINT TO THE PICTURE OF THE U.S.S. ENTERPRISE
LAW S3PICD-1
*
*
*PUSHBUTTON 3
*
LAW S4PIC-1 POINT TO THE PICTURE OF THE DISCOVERY
LAW S4PICD-1
*
*
*PUSHBUTTON 4
*
LAW S1PIC-1 POINT TO THE PICTURE OF THE LONG, SLIM SHIP
LAW S1PICD-1
*
*
*PUSHBUTTON 5
*
LAW S2PIC-1 POINT TO THE PICTURE OF THE SHORT, FAT SHIP
LAW S2PICD-1
*
*
*PUSHBUTTON 6
*
LAW S3PIC-1 POINT TO THE PICTURE OF THE U.S.S. ENTERPRISE
LAW S3PICD-1
*
*
*PUSHBUTTON 7
*
LAW S4PIC-1 POINT TO THE PICTURE OF THE DISCOVERY
LAW S4PICD-1
.STITL SHIP   MANAGEMENT ROUTINES -- DRAWING THE PICTURE -- SHIPS -- LONG, SLIM SHIP
*
*
*SHIP 1:
*
*LONG, SLIM SHIP
*
S1PIC: 111131

111111

111111

111633

311111

144611

111111

147777
*
*
*DAMAGED VERSION
*
S1PICD: 111131

111111

111111

111111

111111

477777
.STITL SHIP   MANAGEMENT ROUTINES -- DRAWING THE PICTURE -- SHIPS -- SHORT, FAT SHIP
*
*
*SHIP 2:
*
*SHORT, FAT SHIP
*
S2PIC: 113113

113111

116313

131111

161151

111633

365114

777777
*
*
*DAMAGED VERSION
*
S2PICD: 113113

113111

111151

111511

477777
.STITL SHIP   MANAGEMENT ROUTINES -- DRAWING THE PICTURE -- SHIPS -- U.S.S. ENTERPRISE
*
*
*SHIP 3:
*
*U.S.S. ENTERPRISE
*
S3PIC: 022333

111155

544113

311111

222260

000066

111111

111164

445114

477777
*
*
*DAMAGED VERSION
*
S3PICD: 022333

111155

544113

311111

222244

451144

777777
.STITL SHIP   MANAGEMENT ROUTINES -- DRAWING THE PICTURE -- SHIPS -- DISCOVERY
*
*
*SHIP 4:
*
*DISCOVERY
*
S4PIC: 122333

111155

541311

153111

531115

311151

232232

231114

463344

446304

444443

355777
*
*
*DAMAGED VERSION
*
S4PICD: 122333

111155

541311

153111

531115

311151

211111

144335

577777
.STITL OBJECT MANAGEMENT SUBROUTINES -- CALCULATION -- GRAVITY EFFECT
GRAV: XX
*
*
*CHECK FOR 'GRAVITY OFF' SWITCH OPTION
*
DZM XGRAV INITIALIZE THE X-EFFECT OF GRAVITY
DZM YGRAV INITIALIZE THE Y-EFFECT OF GRAVITY

LAC SWITCH GET BACK THE SWITCHES
AND (000400) CHECK FOR GRAVITY OFF
SZA "IF SO,
JMP GRAV,I RETURN
*
*
*CALCULATE X^2
*
GRAV1: LAC SQXLOC,I ***
GSM "* PREPARE THE X LOCATION FOR SIGNED MULTIPLICATION
DAC GRAV2 ***

LAC SQXLOC,I GET THE X LOCATION

MULS "MULTIPLY THE X LOCATION BY ITSELF
GRAV2: 0

DAC TEMP0 ***
LACQ "* SAVE THE RESULTS
DAC TEMP1 ***
*
*
*CALCULATE Y^2
*
LAC SQYLOC,I ***
GSM "* PREPARE THE Y LOCATION FOR SIGNED MULTIPLICATION
DAC GRAV3 ***

LAC SQYLOC,I GET THE Y LOCATION

MULS "MULTIPLY THE Y LOCATION BY ITSELF
GRAV3: 0

DAC TEMP2 ***
LACQ "* SAVE THE RESULTS
CLL "***
*
*
*CALCULATE X^2+Y^2
*
TAD TEMP1 ADD THE LOW ORDER BITS OF Y^2
LMQ

GLK "CHECK FOR CARRY
TAD TEMP0
TAD TEMP2 PUT THE HIGH-ORDER BITS OF X^2+Y^2 IN AC
NORMS "AND NORMALIZE X^2+Y^2
DAC TEMP2 SAVE THE SIGNIFICANT RESULTS

LACS "GET THE EXPONENT
TAD (777744) IN THE CORRECT FORMAT
RCR
DAC TEMP3
*
*
*CALCULATE SQUARE ROOT OF X^2+Y^2 (R^2)
*
LAC TEMP2 RELOAD X^2+Y^2
SZL
LRSS 1
DAC TEMP2

JMS SQRT AND FIND THE SQUARE ROOT

DAC GRAV4 SAVE THE RESULT AS AN OPERAND FOR A MULTIPLY
*
*
*CALCULATE R^3
*
LAC TEMP2 LOAD R^2
CLL

MUL "AND MULTIPLY TO GENERATE R(DISTANCE FROM THE SUN)^3
GRAV4: 0

DAC GRAV5 KEEP THE RESULTS AS DIVISORS
DAC GRAV7

LAC TEMP3 GET THE EXPONENT

MULS-15.
3

LLSS 3
ADD GRAVT
XOR (LLSS 0)
DAC GRAV6
DAC GRAV8
.EJECT
*
*
*CALCULATE THE EFFECT OF GRAVITY ON THE X LOCATION
*
LAC SQXLOC,I ***
LRSS 4 * PREPARE THE X LOCATION FOR SIGNED DIVISION
CLL "***

DIVS "DIVIDE THE X LOCATION BY THE CUBE OF THE RADIUS
GRAV5: 0

LACQ "GET THE DIVIDEND IN THE AC
LRSS 18. SHIFT IT BACK INTO THE MQ, SETTING THE AC TO REFLECT THE SIGN

GRAV6: HLT
CMA "GRAVITY IS A NEGATIVE FACTOR

DAC XGRAV
*
*
*CALCULATE THE EFFECT OF GRAVITY ON THE Y LOCATION
*
LAC SQYLOC,I ***
LRSS 4 * PREPARE THE Y LOCATION FOR SIGNED DIVISION
CLL "***

DIVS "DIVIDE THE Y LOCATION BY THE CUBE OF THE RADIUS
GRAV7: 0

LACQ "GET THE DIVIDEND IN THE AC
LRSS 18. SHIFT IT BACK INTO THE MQ, SETTING THE AC TO REFLECT THE SIGN

GRAV8: HLT
CMA "GRAVITY IS A NEGATIVE FACTOR

DAC YGRAV
*
*
*RETURN
*
JMP GRAV,I RETURN


XGRAV: 0
YGRAV: 0
.STITL OBJECT MANAGEMENT SUBROUTINES -- CALCULATION -- SQUARE ROOT
SQRT: XX

SAD (777777)
JMP SQRT4

DAC TEMP0
LACQ
DAC TEMP1

LAC SQDIST,I
DAC SQRT2

LAC TEMP0

SQRT1: CLL

DIV
SQRT2: 0

SZL
JMP SQRT5

LACQ
SAD SQDIST,I
JMP SQRT,I

TAD (1)
SAD SQDIST,I
JMP SQRT,I

TAD SQDIST,I
LRS 1

SQRT3: DAC SQDIST,I
DAC SQRT2

LAC TEMP1
LMQ
LAC TEMP0

JMP SQRT1

SQRT4: DAC SQDIST,I
JMP SQRT,I

SQRT5: CLC
JMP SQRT3
.STITL OBJECT MANAGEMENT SUBROUTINES -- CALCULATION -- SINE AND COSINE
SINCOS: XX

DAC SINE

RAL
GLK
XOR (NOP)
DAC SC6

LAC SINE
TAD (200000)
RAL
GLK
XOR (NOP)
DAC SC7

LAC SINE
TAD (100000)
AND (200000)
LRSS 7
XOR (NOP)
DAC SC5

LAC SINE
RTL
GSM
LRSS 2
*
*
*CONVERT TO RADIANS
*
MUL "MULTIPLY
622077 "BY 2*PI
*
*
*SUBTITUTE X INTO ALGORITHMIC FORMULA
*
DAC SC1 "SAVE X
DAC SC3
*
*
*CALCULATE X^2 AND SUBSTITUTE IT INTO ALGORITHMIC FORMULA
*
MULS "CALCULATE X^2
SC1: 0 "*** X GOES HERE ***

LLSS 3 ADJUST DECIMAL POINT

DAC SC2 "SAVE X^2
DAC SC4
.EJECT
*
*
*%       APPROXIMATE SIN(X) = X-(X^3)/3'+(X^5)/5'
*
MULS "CALCULATE (X^2)/5!
004211

ADD (765252) CALCULATE (X^2)/5!-1/3!

MULS "CALCULATE (X^2)*((X^2)/5!-1/3!) = (X^4)/5!-(X^2)/3!
SC2: 0 "*** X^2 GOES HERE ***

LLSS 3 ADJUST DECIMAL POINT

ADD (100000) CALCULATE (X^4)/5!-(X^2)/3!+1
CLL

MULS "CALCULATE X*((X^4)/5!-(X^2)/3!+1) = (X^5)/5!-(X^3)/3!+X = SIN(X)
SC3: 0 "*** X GOES HERE ***

LLSS 3 ADJUST DECIMAL POINT

DAC SINE
DAC COSINE
.EJECT
*
*
*%       APPROXIMATE COS(X) = 1-(X^2)/2'+(X^4)/4'
*
LAC SC2 GET BACK X^2

MULS "CALCULATE (X^2)/4!
025253

ADD (737777) CALCULATE (X^2)/4!-1/2!

MULS "CALCULATE (X^2)*((X^2)/4!-1/2!) = (X^4)/4!-(X^2)/2!
SC4: 0 "*** X^2 GOES HERE ***

LLSS 3 ADJUST DECIMAL POINT

ADD (100000) CALCULATE (X^4)/4!-(X^2)/2!+1 = COS(X)

SC5: HLT "NOP : COSINE :: SKP : SINE
DAC COSINE
XCT SC5
SKP
DAC SINE
LAC SINE
SZA

SC6: HLT "(NOP) : (X=>+0) :: (CMA) : (X<=-0)
DAC SINE
LAC COSINE
SZA

SC7: HLT "(NOP) : (ABS(X)<1/2*PI) :: (CMA) : (ABS(X)>1/2*PI)
DAC COSINE
*
*
*RETURN
*
JMP SINCOS,I


SINE: 0
COSINE: 0
.STITL MISCELLANEOUS COMMON SUBROUTINES -- PSEUDO-RANDOM NUMBER GENERATION
RANDOM: XX

LAC (613331) GET A PSEUDO-RANDOM CONSTANT
XOR RND ***
ALSS 1 * TRANSMOGRIFY IT USING THE PREVIOUSLY GENERATED PSEUDO-RANDOM NUMBER
ADD RND ***
DAC RND A NEW PSEUDO-RANDOM NUMBER

JMP RANDOM,I RETURN


RND: 0
*
*
*GENERATE RANDOM POSITIONS OF THE SHIPS
*
RNDPOS: XX

JMS RANDOM GET A PSEUDO-RANDOM NUMBER
LMQ "SHOVE INTO MQ
ABS
DAC TEMP0 SAVE IN TEMP

JMS RANDOM GET A PSEUDO-RANDOM NUMBER
DAC TEMP1 SAVE IN TEMP
ABS
TAD TEMP0 ***
SMA "* SEE IF OK
JMP RNDPOS+1 ***

LAC TEMP1

JMP RNDPOS,I RETURN
.EJECT
*
*
*GENERATE RANDOM POSITION OF THE SUN
*
RNDSUN: JMS RANDOM GET A PSEUDO-RANDOM NUMBER
AND (1777) IN RANGE 0-1023.
ADD (140001) MAKE A RANDOM SCOPE COMMAND OUT OF IT
DAC XPOINT SET UP FOR SCOPE ROUTINE

LAC (ADD XPOINT) ADD =:
DAC SCOPEX XOR

JMS RANDOM GET A PSEUDO-RANDOM NUMBER
AND (1777) IN RANGE 0-1023.
ADD (174001) MAKE A RANDOM SCOPE COMMAND OUT OF IT
DAC YPOINT SET UP FOR SCOPE ROUTINE

LAC (ADD YPOINT) ADD =:
DAC SCOPEY XOR

JMP AGAIN BEGIN A NEW GAME
*
*
*PUT THE SUN BACK IN THE CENTER OF THE SCREEN
*
CENTER: LAC (141000) SCOPE COMMAND -- POINT MODE -- FOR X-COORDINATE
DAC XPOINT

LAC (XOR XPOINT) XOR =:
DAC SCOPEX ADD

LAC (175000) SCOPE COMMAND -- POINT MODE -- FOR Y-COORDINATE
DAC YPOINT

LAC (XOR YPOINT) XOR =:
DAC SCOPEY ADD

JMP AGAIN BEGIN A NEW GAME
.STITL MISCELLANEOUS COMMON SUBROUTINES -- SCOPE DRAWING
*
*MOVES THE SCOPE POINTER TO THE X AND Y LOCATIONS
*SPECIFIED IN XLOC AND YLOC
*
SCOPE: XX
*
*
*CLEAR THE LINK FOR UPCOMING SHIFTS
*
CLL
*
*
*MOVE TO THE X-COORDINATE INVISIBLY
*
LAC XLOC GET THE X-COORDINATE

LRS 8. POSITION IN THE FIELD

SCOPEX: XOR XPOINT OF A POINT-MODE SCOPE COMMAND

DAC X0,I PUT IT IN THE SCOPE BUFFER
*
*
*MOVE TO THE Y-COORDINATE AND DISPLAY THE POINT
*
LAC YLOC GET THE Y-COORDINATE

LRS 8. POSITION IN THE FIELD

SCOPEY: XOR YPOINT OF A POINT-MODE SCOPE COMMAND

DAC X0,I PUT IT IN THE SCOPE BUFFER
*
*
*RETURN
*
JMP SCOPE,I AND RETURN


XLOC: 0
YLOC: 0

XPOINT: 141000 "SCOPE COMMAND -- POINT MODE -- FOR X-COORDINATE
YPOINT: 175000 "SCOPE COMMAND -- POINT MODE -- FOR Y-COORDINATE
.STITL MISCELLANEOUS COMMON SUBROUTINES -- PUSHBUTTON INTERFACE
BUTTIN: XX
*
*
*MAKE THE PUSHBUTTONS LOOK LIKE THE SWITCHES
*
LAC BUTTON GET BACK THE PUSHBUTTONS

CLL
LRS 18.-4 ***
ALS 18.-4-6 * MAKE THE PUSHBUTTONS LOOK LIKE THE SWITCHES
LLS 6-1 ***

DAC TEMP0 ***
ALS 1 * FORM THE WARP BITS
AND TEMP0 ***

ALS 1 ***
AND (400040) * POSITION, EXTRACT, AND SAVE THEM
DAC TEMP1 ***

XOR TEMP0 ***
ALS 4 * FORM THE INVISIBILITY BITS
AND TEMP1 ***

LMQ "SAVE THEM FOR A MOMENT

XOR TEMP1 IF INVISIBLE THEN NOT A WARP
DAC TEMP1 SO FIX WARP BITS ACCORDINGLY

EAECLA!LRS 5 MOVE THE INVISIBILITY BITS TO WHERE THEY BELONG
LACQ

XOR TEMP1 ADD IN THE WARP BITS
XOR TEMP0 ADD IN THE REST OF THE PUSHBUTTONS

SAD (370037) CHECK FOR ALL PUSHBUTTONS PUSHED
JMP GROWTH EXIT TO GROWTH IF SO

JMP BUTTIN,I RETURN
*
*
*ALL PUSHBUTTONS PUSHED -- SHUT DOWN
*
GROWTH: CAF "CLEAR ALL FLAGS
CDF "CLEAR DISPLAY FLAGS
CLOF "TURN THE CLOCK OFF


SWITCH: 777777 "ACCUMULATOR SWITCHES
BUTTON: 776000 "PUSHBUTTONS

BUTINS: 370037 "PUSHBUTTONS ENCODED FOR PROGRAM USE
.STITL PROGRAM INTERRUPT SERVICE ROUTINES -- KEYBOARD SERVICE
PATCH: AND (177) MASK TO SEVEN BITS
DAC CHAR

SAD (072) CHECK FOR COLON
JMP PAT1

SAD (073) CHECK FOR SEMICOLON
JMP PAT2

TAD (-060) ***
SPA "* IGNORE CONTROL CHARACTERS AND PUNCTUATION MARKS
JMP INT6 ***

DAC CHAR

LAC DATUM
CLL "***
ALS 3 * ACCUMULATE ANOTHER OCTIT
ADD CHAR ***
DAC DATUM

JMP INT6 WAIT FOR ANOTHER CHARACTER TO COME BY

PAT1: LAW LOC SET UP 'LOC' TO POINT TO ITSELF
DAC LOC

PAT2: LAC DATUM ***
DZM DATUM * MAKE THE PATCH AND RESET THE ACCUMULATOR
DAC LOC,I ***

LAC CHAR GET BACK CHARACTER INPUT
SAD (073) ***
ISZ LOC * IF SEMICOLON TYPED, INCREMENT PATCH ADDRESS
JMP INT6 ***


CHAR: 377 "CHARACTER INPUT

LOC: THREE "PATCH ADDRESS
DATUM: JMP START DATA ACCUMULATOR
.STITL PROGRAM INTERRUPT SERVICE ROUTINES
INT: DAC INTA SAVE THE ACCUMULATOR REGISTER
ISZ RND
NOP
LDS "LOAD DISPLAY STATUS
SMA "CHECK FOR A TRAP INTERRUPT
JMP INT1 NO, SO CHECK FURTHER
LDB "LOAD THE LAST SCOPE INSTRUCTION WE EXECUTED
SPA "WAS IT A TRAP INSTRUCTION?
JMP INT8 YES

INT1: AND (040000) CHECK FOR A STOP TRAP
SZA "NO, SO CHECK FURTHER
JMP INT7 "YES

CLSF "CHECK FOR A CLOCK INTERRUPT
JMP INT2 NO, SO CHECK FURTHER
LAC (JMP BUMP) YES, SO PUT A JUMP TO THE COLLISION ROUTINE
DAC THREE IN LOCATION THREE, TO RESTART COLLISION CHECKING
CLON "TURN THE CLOCK BACK ON
JMP INT9 AND EXIT

INT2: SPB "CHECK FOR A PUSHBUTTON INTERRUPT
JMP INT3 NO, SO CHECK FURTHER
CPB "YES, SO CLEAR THE FLAG
JMP INT9 AND EXIT

INT3: KSF "CHECK FOR A TELETYPE KEYBOARD INTERRUPT
JMP INT4 NO, SO CHECK FURTHER
KRB "YES, SO GET THE CHARACTER THAT WAS TYPED
JMP PATCH GO INTERPRET IT

INT4: SCK "CHECK FOR A CONSOLE KEYBOARD INTERRUPT
JMP INT5 NO, SO CHECK FURTHER
LCK!CCK "YES, SO GET THE CHARACTER THAT WAS TYPED
JMP PATCH GO INTERPRET IT

INT5: CAF "CHECK NO FURTHER

INT6: CLON "TURN ON THE CLOCK

INT7: LAC PSCBUF

INT8: BEG "TURN ON THE SCOPE DISPLAY

INT9: LAC INTA RESTORE THE ACCUMULATOR REGISTER
ION "TURN ON THE INTERUPT SYSTEM
JMP PI,I AND RETURN WHENCE WE CAME


INTA: 0 "AC SAVE LOCATION ON INTERRUPTS
.STITL HIGH CORE DEFINITIONS
*
*
*SCOPE BUFFER POINTERS
*
PSCBUF: SCBUF "POINTER TO THE BEGINNING OF THE SCOPE BUFFERS

PSBUF1: .BLOCK 1 POINTER TO THE STAR SCOPE BUFFER
PSBUF2: .BLOCK 1 POINTER TO THE STAR SCOPE BUFFER

STREND: .BLOCK 1 POINTER TO THE END OF THE STAR SCOPE BUFFER

PBUFF1: .BLOCK 1 POINTER TO THE FIRST SCOPE BUFFER
PBUFF2: .BLOCK 1 POINTER TO THE SECOND SCOPE BUFFER

OFFSET: .BLOCK 1 OFFSET BETWEEN BUFFERS
*
*
*HANDICAP TABLE POINTER
*
HANDI: .BLOCK 1 POINTER TO THE PARAMETER TABLE CURRENTLY IN USE
*
*
*TEMPORARY STORAGE
*
TEMP0: .BLOCK 1 TEMPORARY STORAGE
TEMP1: .BLOCK 1 TEMPORARY STORAGE
TEMP2: .BLOCK 1 TEMPORARY STORAGE
TEMP3: .BLOCK 1 TEMPORARY STORAGE
*
*
*COUNTERS
*
OBJCNT: .BLOCK 1 COMPLEMENT OF NUMBER OF OBJECTS CHECKED AGAINST COLLISION
SHPCNT: .BLOCK 1 COMPLEMENT OF NUMBER OF SHIPS CHECKED AGAINST COLLISION

NSHIP: .BLOCK 1 COMPLEMENT OF NUMBER OF SURVIVING SHIPS
*
*
*GAME TIMERS
*
GAMTIM: .BLOCK 1 TIMER TO TIME OUT GAME
*
*
*STAR TIMER
*
STIMER: .BLOCK 1 STAR MOTION TIMER
*
*
*STAR TABLE POINTERS
*
SRANGE: .BLOCK 1 X-COORDINATE RANGE DEFINITION
PSTABL: .BLOCK 1 POINTER TO THE STAR TABLE
.STITL HIGH CORE DEFINITIONS -- OBJECT DEFINITION TABLE -- OBJECT DEFINITIONS
*
*
*TRANSFER VECTOR -- MANAGEMENT ROUTINE ADDRESSES OF SHIPS AND BULLETS
*
SXTRAN: .BLOCK NUMOBJ
S1TRAN: .EQU SXTRAN+1-1
S2TRAN: .EQU SXTRAN+2-1
S3TRAN: .EQU SXTRAN+3-1
TRNEND: .EQU SXTRAN+NUMOBJ-1
*
*
*X LOCATIONS OF SHIPS AND BULLETS
*
SXXLOC: .BLOCK NUMOBJ
S1XLOC: .EQU SXXLOC+1-1
S2XLOC: .EQU SXXLOC+2-1
S3XLOC: .EQU SXXLOC+3-1
*
*
*Y LOCATIONS OF SHIPS AND BULLETS
*
SXYLOC: .BLOCK NUMOBJ
S1YLOC: .EQU SXYLOC+1-1
S2YLOC: .EQU SXYLOC+2-1
S3YLOC: .EQU SXYLOC+3-1
*
*
*X VELOCITIES OF SHIPS AND BULLETS
*
SXXVEL: .BLOCK NUMOBJ
*
*
*Y VELOCITIES OF SHIPS AND BULLETS
*
SXYVEL: .BLOCK NUMOBJ
*
*
*MULTI-PURPOSE TIMERS OF SHIPS AND BULLETS
*
SXTIME: .BLOCK NUMOBJ
*
*
*DISTANCES FROM THE SUN OF SHIPS AND BULLETS
*
SXDIST: .BLOCK NUMOBJ
.STITL HIGH CORE DEFINITIONS -- OBJECT DEFINITION TABLE -- SHIP DEFINITIONS
*
*
*ANGLE OF SHIPS
*
SXANGL: .BLOCK NUMSHP
S1ANGL: .EQU SXANGL+1-1
S2ANGL: .EQU SXANGL+2-1
S3ANGL: .EQU SXANGL+3-1
*
*
*ANGULAR MOMENTUM OF SHIPS
*
SXROLL: .BLOCK NUMSHP
*
*
*FUEL SUPPLY OF SHIPS
*
SXFUEL: .BLOCK NUMSHP
S1FUEL: .EQU SXFUEL+1-1
S2FUEL: .EQU SXFUEL+2-1
S3FUEL: .EQU SXFUEL+3-1
*
*
*BULLET SUPPLY OF SHIPS
*
SXBULL: .BLOCK NUMSHP
S1BULL: .EQU SXBULL+1-1
S2BULL: .EQU SXBULL+2-1
S3BULL: .EQU SXBULL+3-1
*
*
*POINTERS TO THE PICTURES OF THE SHIPS
*
SXPICP: .BLOCK NUMSHP
S1PICP: .EQU SXPICP+1-1
S2PICP: .EQU SXPICP+2-1
S3PICP: .EQU SXPICP+3-1
*
*
*POINTERS TO THE PICTURES OF THE DAMAGED SHIPS
*
SXPICN: .BLOCK NUMSHP
S1PICN: .EQU SXPICN+1-1
S2PICN: .EQU SXPICN+2-1
S3PICN: .EQU SXPICN+3-1
*
*
*TIME UNTIL NEXT POSSIBLE WARP
*
SXWTIM: .BLOCK NUMSHP
.EJECT
*
*
*WARP FACTORS
*
SXWFAC: .BLOCK NUMSHP
*
*
*INVISIBILITY FLAGS
*
SXINVF: .BLOCK NUMSHP
*
*
*INVISIBILITY TIMERS
*
SXINVT: .BLOCK NUMSHP
*
*
*DAMAGES
*
SXDAMS: .BLOCK NUMSHP
S1DAMS: .EQU SXDAMS+1-1
S2DAMS: .EQU SXDAMS+2-1
S3DAMS: .EQU SXDAMS+3-1
*
*
*THRUST RESTORATION TIMERS
*
SXTTIM: .BLOCK NUMSHP
*
*
*BULLET RESTORATION TIMERS
*
SXBTIM: .BLOCK NUMSHP
*
*
*LEFT TURN RESTORATION TIMERS
*
SXLTIM: .BLOCK NUMSHP
*
*
*RIGHT TURN RESTORATION TIMERS
*
SXRTIM: .BLOCK NUMSHP
*
*
*LENGTH OF THE OBJECT DEFINITION TABLE
*
ODTLEN: .EQU .-SXTRAN LENGTH OF THE OBJECT DEFINITION TABLE
.STITL HIGH CORE DEFINITIONS -- OBJECT DEFINITION TABLE -- POINTERS
*
*
*POINTERS TO THE OBJECT DEFINITION TABLE
*
SQTRAN: .BLOCK 1

SQXLOC: .BLOCK 1
SQYLOC: .BLOCK 1

SQXVEL: .BLOCK 1
SQYVEL: .BLOCK 1

SQTIME: .BLOCK 1

SQDIST: .BLOCK 1

SQANGL: .BLOCK 1

SQROLL: .BLOCK 1

SQFUEL: .BLOCK 1
SQBULL: .BLOCK 1

SQPICP: .BLOCK 1
SQPICN: .BLOCK 1

SQWTIM: .BLOCK 1
SQWFAC: .BLOCK 1

SQINVF: .BLOCK 1
SQINVT: .BLOCK 1

SQDAMS: .BLOCK 1

SQTTIM: .BLOCK 1
SQBTIM: .BLOCK 1
SQLTIM: .BLOCK 1
SQRTIM: .BLOCK 1
.STITL HIGH CORE DEFINITIONS -- LAW/XCT TABLE
STABLE: ...

.DET SAVE,OFF
*
*
*EDENIC HEAVENS
*
.DATA 001777,400561,001722,501515,001712,401677,001712,400105
.DATA 001656,400452,001441,400402,001410,401240,001357,400732
.DATA 001267,401247,001226,500414,001210,401723,001076,400472
.DATA 001026,501522,000734,401161,000712,500211,000706,401305
.DATA 000655,400402,000642,400411,000631,401654,000627,401075
.DATA 000623,501716,000560,400025,000547,401064,000451,401277
.DATA 000404,500662,000335,400336,000323,401266,000272,400233
.DATA 000222,400776,000174,501100,000165,400254,000164,401335
.DATA 000157,400120,000115,400031,000060,400454,000040,401302
.DATA 000021,501124
*
*
*LAW/XCT TABLE PROPER
*
.DATA 777735,401670,777713,401726,777700,400457,777657,401104
.DATA 777651,400011,777620,401307,777603,401326,777557,401437
.DATA 777555,400605,777536,400441,777530,400015,777512,401002
.DATA 777444,500432,777423,500345,777347,400666,777317,500306
.DATA 777305,401426,777266,401202,777261,401752,777202,400536
.DATA 777171,401315,777160,401306,777156,400516,777151,401717
.DATA 777131,401536,777110,401612,777101,401610,777073,401766
.DATA 777072,401623,777064,401536,777062,401512,777050,401546
.DATA 777050,501660,777047,501544,777034,401554,777021,400772
.DATA 777011,401515,776776,401342,776776,701563,776767,400657
.DATA 776760,401430,776753,401546,776752,400266,776734,400074
.DATA 776703,400662,776655,501232,776651,401307,776645,401174
.DATA 776631,400600,776623,501064,776621,401344,776611,401460
.DATA 776572,401044,776557,400337,776550,400531,776545,400064
.DATA 776545,401750,776533,401533,776504,500611,776476,401540
.DATA 776473,400466,776451,400357,776446,401077,776444,500215
.DATA 776443,400327,776435,700503,776414,500542,776377,400322
.DATA 776370,400032,776366,400765,776360,401117,776347,400514
.DATA 776346,500707,776345,401050,776344,601217,776331,401105
.DATA 776331,401761,776314,500046,776304,401206,776276,401645
.DATA 776273,500770,776272,400530,776263,500151,776255,401326
.DATA 776254,501341,776251,400567,776247,500570,776247,400620
.DATA 776243,600743,776242,401322,776240,501740,776224,400704
.DATA 776223,400533,776223,401135,776212,401567,776211,600722
.DATA 776157,400001,776143,500256,776140,600443,776132,401437
.DATA 776111,400045,776101,401716,776071,701250,776055,400275
.DATA 776033,400672,776021,401334,776017,400417,776012,401712
.DATA 775766,400254,775764,401520,775733,401504,775733,401560
.DATA 775706,400562,775677,400311,775627,600151,775626,401152
.DATA 775574,400626,775574,401716,775567,400541,775543,401250
.DATA 775511,601567,775507,400114,775500,400143,775472,400300
.DATA 775465,401343,775445,401460,775435,501450,775427,700207
.DATA 775414,401071,775350,401457,775347,400067,775345,400361
.DATA 775333,400070,775331,400177,775265,400643,775264,401730
.DATA 775256,400240,775203,400770,775143,501574,775131,501770
.DATA 775104,400123,775056,501301,775050,401320,775040,401426
.DATA 775000,400011,774750,701175,774732,400454,774557,400144
.DATA 774552,400747,774545,401074,774500,400703,774472,400121
.DATA 774457,400340,774425,401330,774337,400656,774234,401212
.DATA 774226,401124,774201,400235,774177,401761,774174,401125
.DATA 774170,400544,774166,401645,774150,501232,774147,400324
.DATA 774137,401215,774067,501220,774047,401427,773713,401076
.DATA 773652,400371,773646,400460,773576,600505,773566,400713
.DATA 773546,400757,773502,401164,773471,400760,773465,400304
.DATA 773463,401354,773365,400271,773306,401302,773250,400342
.DATA 773237,501611,773233,401357,773232,401003,773230,701433
.DATA 773211,400362,773130,401707,773127,501717,773061,400214
.DATA 773032,400775,773015,401337,772653,500233,772561,400154
.DATA 772547,400730,772545,401727,772525,401263,772456,400005
.DATA 772442,501737,772441,501554,772422,400671,772403,400274
.DATA 772371,401226,772352,401374,772343,400172,772252,400455
.DATA 772237,400772,772162,400153,772155,401241,772141,401731
.DATA 772132,601530,772122,401065,772027,401243,771776,401323
.DATA 771743,500012,771702,500175,771653,400775,771646,401642
.DATA 771563,500225,771546,400234,771475,400526,771457,500753
.DATA 771456,401365,771347,400463,771337,501132,771314,401631
.DATA 771272,501406,771216,400154,771215,401634,771137,400154
.DATA 771070,700416,771054,400240,771021,400575,771004,401137
.DATA 771001,500776,770670,401631,770654,401563,770616,501656
.DATA 770550,401056,770453,401102,770451,400442,770427,400602
.DATA 770425,701700,770406,400332,770377,401576,770321,400727
.DATA 770207,401577,770205,401502,770175,400611,770156,401614
.DATA 770152,401065,770122,500234,770112,401674,770055,400646
.DATA 770013,401071,767732,400106,767675,500463,767534,400443
.DATA 767525,400267,767524,401367,767461,400110,767454,401707
.DATA 767437,501231,767422,401257,767422,501546,767403,401644
.DATA 767402,500671,767372,401155,767364,401744,767355,400212
.DATA 767330,401554,767324,400302,767311,500004,767260,400403
.DATA 767254,500103,767244,400060,767241,400053,767206,400113
.DATA 767204,400441,767166,500662,767137,500633,767111,401035
.DATA 767106,401671,767102,400075,767063,401505,767061,400141
.DATA 767052,400506,767031,400213,767026,12764,767026,501756
.DATA 767025,400034,767013,401412,766766,500424,766656,400417
.DATA 766621,401353,766574,401331,766520,401445,766473,500235
.DATA 766433,501512,766423,400770,766377,400042,766376,400336
.DATA 766333,400616,766332,401140,766250,601440,766237,500243
.DATA 766234,400511,766211,400334,766177,400024,766140,501077
.DATA 766044,500442,766032,400654,766032,401143,766030,401103
.DATA 766030,401575,766022,401036,765775,401071,765761,401306
.DATA 765760,501331,765745,401731,765723,400040,765645,401114
.DATA 765644,401763,765643,500676,765630,400464,765621,400053
.DATA 765620,401756,765571,400263,765526,400503,765424,401721
.DATA 765421,400622,765415,401633,765333,401135,765330,500035
.DATA 765306,401524,765276,400572,765261,400016,765245,501470
.DATA 765244,500761,765224,500036,765146,401743,765117,400146
.DATA 765117,400220,765065,501102,765060,401003,765004,401243
.DATA 764776,401675,764766,400735,764737,401625,764732,401611
.DATA 764676,501354,764665,401640,764654,401656,764644,701304
.DATA 764634,401021,764621,401273,764613,401214,764565,501665
.DATA 764461,500747,764435,401523,764417,400334,764415,400334
.DATA 764376,400327,764375,500250,764321,400143,764263,401372
.DATA 764246,401506,764231,501504,764230,400737,764223,401733
.DATA 764215,401542,764170,401517,764145,401547,764144,400437
.DATA 764143,400605,764107,400453,764006,400063,763775,400157
.DATA 763747,400364,763740,401336,763710,401333,763701,401156
.DATA 763640,400167,763634,401671,763574,400006,763551,500567
.DATA 763514,400073,763506,400503,763472,400172,763454,400110
.DATA 763440,501326,763435,401600,763423,500207,763264,400704
.DATA 763246,500756,763246,401150,763244,400271,763214,501202
.DATA 763150,400503,763114,400725,763113,401412,763067,401024
.DATA 763050,401140,763043,500764,763031,400401,762776,400762
.DATA 762732,501353,762720,400110,762674,401412,762656,400277
.DATA 762634,400507,762621,500214,762614,401275,762533,401113
.DATA 762526,501516,762511,401312,762475,400022,762440,400552
.DATA 762430,400445,762420,401076,762414,400442,762357,400052
.DATA 762336,400036,762330,401020,762322,401206,762313,401426
.DATA 762265,400027,762216,401164,762204,400136,762202,401034
.DATA 762177,400250,762040,401220,762021,400553,762003,400151

.DET RESTORE

ENDTAB: ENDTAB "END-OF-TABLE MARKER
.STITL ASSEMBLY CONTROL
*
*
*LITERAL POOL
*
.LIT
*
*
*START OF SCOPE BUFFER
*
SCBUF: ...
.EJECT
.END START
